<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Pivotree Cloud Technology Blog - POC </title>
		<link>https://blog.pivotree.cloud/</link>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<author>Pivotree Team</author>
		<rights>Copyright (c) 2021</rights>
		<updated>2021-02-18 13:00:00 &#43;0800 &#43;0800</updated>
		
		<item>
			<title>How to monitor Bitbucket user and group permissions with API</title>
			<link>https://blog.pivotree.cloud/2021-02-18-bitbucket-user-groups/</link>
			<pubDate>Thu, 18 Feb 2021 13:00:00 &#43;0800</pubDate>
			<author>Pivotree Team</author>
			<guid>https://blog.pivotree.cloud/2021-02-18-bitbucket-user-groups/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pivotree.cloud/img/tomas-malik-TCJM2dF7FLM-unsplash.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description>&lt;h1 id=&#34;how-to-manage-users-and-groups-in-bitbucket&#34;&gt;How to manage users and groups in Bitbucket&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Use case&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;I want to maintain users and groups and their access to repositories in an organization in Bitbucket.
To make sure I do not miss newly changed admin access, I want to use the Bitbucket API to retrieve the list of permissions on repository basis and on user/group bases.&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;Bitbucket requires a username and password to access the API. This information is stored in environment variables
&lt;code&gt;BBUSER&lt;/code&gt; and &lt;code&gt;BBPASSWORD&lt;/code&gt;.  &lt;code&gt;BBPASSWORD&lt;/code&gt; should be an access token / app password defined in the &lt;code&gt;App passwords&lt;/code&gt; section
of the user settings:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/bbgh/app-password.png&#34; alt=&#34;app password UI&#34;&gt;&lt;/p&gt;
&lt;p&gt;The variable &lt;code&gt;BB&lt;/code&gt; represents the Bitbucket API URL&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;export BBUSER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-user-name&amp;gt;
export BBPASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-user-token&amp;gt;
export BB&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://api.bitbucket.org/2.0&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I am using a personal shortcut by creating the file &lt;code&gt;~/.ssh/bitbucket-token-work.secret&lt;/code&gt; with the contents described above and importing them, unless the variables are already defined:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBUSER&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBPASSWORD&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  echo Using locally defined credentials from ~/.ssh/bitbucket-token-work.secret 
. ~/.ssh/bitbucket-token-work.secret
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;get-list-of-users&#34;&gt;Get list of users&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ENTRIES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s --user $BBUSER:$BBPASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/teams/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;org&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/members  | jq .size&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
PAGELEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s --user $BBUSER:$BBPASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/teams/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;org&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/members  | jq .pagelen&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
PAGES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;expr $ENTRIES / $PAGELEN &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt; 1&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;seq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; $PAGES&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; 
    curl -s --user $BBUSER:$BBPASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/teams/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;org&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/members&lt;span style=&#34;color:#ae81ff&#34;&gt;\?&lt;/span&gt;page&lt;span style=&#34;color:#ae81ff&#34;&gt;\=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;amp;&lt;/span&gt;pagelen&lt;span style=&#34;color:#ae81ff&#34;&gt;\=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PAGELEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;  | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.values[] | {nickname, account_id, &amp;#34;&lt;/span&gt;repos&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: .links.repositories.href}&amp;#34;&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;org&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-USERS-&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.json
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;    
---
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nickname&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dxxxx Sxxxx Oxxx&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;account_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;557058:e8xxxxxxdf&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;repos&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.bitbucket.org/2.0/repositories/%7B13xxxxxef4%7D&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nickname&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dxxx Axxx&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;account_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;55xxxxc0&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;repos&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.bitbucket.org/2.0/repositories/%7Ba76xxxxc9%7D&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alternative format is to get all 3 fields on the same line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl -s --user $BBUSER:$BBPASSWORD https://api.bitbucket.org/2.0/workspaces/thinkwrap/permissions/repositories | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.values[] | .repository.name + &amp;#34;|&amp;#34; + .user.display_name + &amp;#34;|&amp;#34; + .permission&amp;#39;&lt;/span&gt;
---
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;smw-hybris|Rxxx Oxxx Rxxx|read&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;smw-hybris|Source Bridge|admin&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;smw-hybris|Jxxxx Fxxxx|admin&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;smw-hybris|Yxxxx Lxxx|write&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;smw-hybris|buildmastertw|read&amp;#34;&lt;/span&gt;
....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;get-list-of-users-group&#34;&gt;Get list of users group&lt;/h2&gt;
&lt;p&gt;For accessing group we need to use the legacy 1.0 API. The API is down since 2019 but the group related endpoints are still supported, because Atlassian did not deliver the proper 2.0 of that endpoint implementation yet.&lt;/p&gt;
&lt;p&gt;This is the output text format for every group in ${org}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BrownBagExamples|read|Yxxx Lxxx&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;QA-Heroes||Dxxx Bxxx Mxxx&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sg-bitbucket-automation||sa-bitbucket&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Platform Engineers||Dxxxx Axxx;Mxxx Mxxx&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;readonly|read|Source Bridge;Cxxxx Macxxxx;Read Only Source Access H3&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Developers|write|Jxxxx J. Cxxxx;Pxxxx Yxxxx;Dxxxx Dxxxx;Brendan Sxxx;Brant Mxxx;Dave Axxx;David Bxxx Mxxx;&amp;#34;&lt;/span&gt;
....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are three fields separated by &amp;lsquo;|&amp;rsquo; - group name, default access to new repositories (should be empty for non-admin and non-service accounts), and the list of member user names (separated by a &amp;lsquo;;&#39;).&lt;/p&gt;
&lt;p&gt;Here is the code that produces that output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBUSER&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBPASSWORD&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  echo Using locally defined credentials from ~/.ssh/bitbucket-token-work.secret 
. ~/.ssh/bitbucket-token-work.secret
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; org in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;./bb-teams.sh &lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    curl -s --user $BBUSER:$BBPASSWORD https://api.bitbucket.org/1.0/groups/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;org&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/ | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.[] | .name + &amp;#34;|&amp;#34; + .permission + &amp;#34;|&amp;#34; + ([.members[].display_name] | join(&amp;#34;;&amp;#34;)) &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        | tee &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;org&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-group-access.txt
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;getting-matrix-of-access-rights-per-repository-and-user&#34;&gt;Getting matrix of access rights per repository and user&lt;/h2&gt;
&lt;p&gt;User groups are the preferred way of managing permissions. At the repository level, the effective rights is a combination of the access assigned through
user groups and the access rights assigned directly to users - see the example&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/bbgh/user-group-1.png&#34; alt=&#34;user and group access&#34;&gt;&lt;/p&gt;
&lt;p&gt;We will produce a matrix of the information in 2 steps: at first, we will generate a linear
list of triplets in the form REPO-NAME|USER-NAME|access&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&amp;#34;smw-hybris|Rxxx Oxxx Rxxx|read&amp;#34;
&amp;#34;smw-hybris|Source Bridge|admin&amp;#34;
&amp;#34;smw-hybris|Jxxxx Fxxxx|admin&amp;#34;&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The API call that generates this list is&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;   curl -s --user $BBUSER:$BBPASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/workspaces/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;org&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/permissions/repositories?pagelen=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PAGELEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;amp;page=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.values[] | .repository.name + &amp;#34;|&amp;#34; + .user.display_name + &amp;#34;|&amp;#34; + .permission&amp;#39;&lt;/span&gt; | tee &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;org&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-repo-users-&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The script running the call for every repository in the workspace is &lt;code&gt;bb-repo-user.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It expects single argument - a workspace name (e.g. &lt;code&gt;pivotree_h3&lt;/code&gt;) and generates file named
&lt;code&gt;WORKSPACE-repo.permissions&lt;/code&gt; (e.g. &lt;code&gt;pivotree_h3-repo.permissions&lt;/code&gt;) with the structure above - sorted.&lt;/p&gt;
&lt;p&gt;It can run long time a generates large number of temporary files.&lt;/p&gt;
&lt;p&gt;It also generates output during run to see how far it proceeded.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;./bb-repo-user.sh pivotree_h3

Logged on as user
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;account_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;55xxxxxxda&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uuid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{d8xxxxxx08}&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;miro-adamy-PVT&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;display_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Miro Adamy&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;snippets&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.bitbucket.org/2.0/snippets/%7Bd8dxxxxxxx08%7D&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;self&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.bitbucket.org/2.0/users/%7Bd8xxxxxxxxx08%7D&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
ENTRIES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;2556, PAGELEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;100, PAGES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ... curl -s --user ...:... https://api.bitbucket.org/2.0/workspaces/pivotree_h3/permissions/repositories?pagelen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;100&amp;amp;page&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dive-data-manager|Source Bridge|read&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dive-data-manager|Pxxxxx Lxxxxg|admin&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dive-data-manager|Dxxxx Dxxxx|admin&amp;#34;&lt;/span&gt;
...
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; ... curl -s --user ...:... https://api.bitbucket.org/2.0/workspaces/pivotree_h3/permissions/repositories?pagelen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;100&amp;amp;page&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pvt-sgm-size-norm-prog|Source Bridge|read&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pvt-sgm-size-norm-prog|Yxxxxx Lxxxxx|read&amp;#34;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The second step is to generate JSON files proving different views of this data. The pythin script expects as input one or more files in the format of
&lt;code&gt;WORKSPACE-repo.permissions&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python3 generate_repo_stats.py pivotree_h3-repo.permissions
Processed &lt;span style=&#34;color:#ae81ff&#34;&gt;2556&lt;/span&gt; lines
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The script creates 4 files:&lt;/p&gt;
&lt;h3 id=&#34;repo_by_accessjson&#34;&gt;REPO_BY_ACCESS.json&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;
{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ApiGateway&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;: [
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bxxxx Mxxxxx&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bxxxx Sxxxxx&amp;#34;&lt;/span&gt;,
    ],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;read&amp;#34;&lt;/span&gt;: [
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User Name2&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User Name3&amp;#34;&lt;/span&gt;,
    ],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;write&amp;#34;&lt;/span&gt;: [
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User Name4&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User Name5&amp;#34;&lt;/span&gt;,
    ]
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;JIRA-voting&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;: [
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User Name6&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User Name7&amp;#34;&lt;/span&gt;,

    ],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;read&amp;#34;&lt;/span&gt;: [
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User Name8&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User Name9&amp;#34;&lt;/span&gt;,
    ],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;write&amp;#34;&lt;/span&gt;: [
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User Name1&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User Name2&amp;#34;&lt;/span&gt;,
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;repo_by_userjson&#34;&gt;REPO_BY_USER.json&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ApiGateway&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;User Name1&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;User Name2&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;read&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Read Only Source Access H3&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;read&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Source Bridge&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;read&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;User Name3&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;write&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;JIRA-voting&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;User Name1&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;User Name3&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Read Only Source Access H3&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;read&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Source Bridge&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;read&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;User Name5&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;read&amp;#34;&lt;/span&gt;
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;user_by_accessjson&#34;&gt;USER_BY_ACCESS.json&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;User Name1&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;: [
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;repo-1&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;repo-2&amp;#34;&lt;/span&gt;
    ],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;write&amp;#34;&lt;/span&gt;: [
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dive-testing-service&amp;#34;&lt;/span&gt;
    ]
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;User Name2&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;read&amp;#34;&lt;/span&gt;: [
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pvt-sls-starter&amp;#34;&lt;/span&gt;
    ]
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;user_by_repojson&#34;&gt;USER_BY_REPO.json&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;User Name1&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;repo-1&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;repo-2&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;read&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;User Name2&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pvt-sls-starter&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;read&amp;#34;&lt;/span&gt;
  }
}
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These can be easily processed using JQ to retrieve any type of information, and together with permission file it can be used to quickly find out answers to administration related questions&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;p&gt;What repos does Juan have admin ccess to ?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cat *.permissions | grep admin | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Juan&amp;#39;&lt;/span&gt; | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/&amp;#34;//g&amp;#39;&lt;/span&gt; | cut -d&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt; -f1
dive-cx-account
dive-cx-js-sdk
dive-cx-ui
....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Who can access repo ApiGateway&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt; cat *.permissions | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/&amp;#34;//g&amp;#39;&lt;/span&gt; | grep ApiGateway  | cut -d&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt; -f2,3
User Name1|admin
User Name2|read
Miro Adamy|admin
Read Only Source Access H3|read
Source Bridge|read
....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
		</item>
		
		<item>
			<title>How to mirror Github and Bitbucket repositories</title>
			<link>https://blog.pivotree.cloud/2021-02-17-mirroring-repos/</link>
			<pubDate>Wed, 17 Feb 2021 13:00:00 &#43;0800</pubDate>
			<author>Pivotree Team</author>
			<guid>https://blog.pivotree.cloud/2021-02-17-mirroring-repos/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pivotree.cloud/img/polina-kuzovkova-L452YQvckJQ-unsplash.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description>&lt;h1 id=&#34;mirroring-large-number-of-github-or-bitbucket-repositories&#34;&gt;Mirroring large number of GitHub or Bitbucket repositories&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Use case&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;I want to create local clone of a large number of repositories from an organization in GitHub / Bitbucket.&lt;/p&gt;
&lt;h2 id=&#34;assumptions&#34;&gt;Assumptions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;user has SSH key registered with the GH / BB - can clone using ssh protocol&lt;/li&gt;
&lt;li&gt;user has successfully cloned at least one repo from command line before (the /etc/hosts contains host entries for BB and GH)&lt;/li&gt;
&lt;li&gt;user has modern version of Python 3 installed (3.6 or better)&lt;/li&gt;
&lt;li&gt;user has local installation of a reasonably modern Git&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;
&lt;p&gt;First I use the &lt;code&gt;./bb-repo-links.sh&lt;/code&gt; and &lt;code&gt;./gh-repo-links.sh&lt;/code&gt; to generate list of repositories.
See these blog articles: &lt;a href=&#34;https://blog.pivotree.cloud/2021-02-15-bitbucket-list-repos/&#34;&gt;How to list repositories in Bitbucket&lt;/a&gt; and &lt;a href=&#34;https://blog.pivotree.cloud/2021-02-16-github-list-repos/&#34;&gt;How to list repositories in github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These are text files and have the structure like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;EXFO|git@bitbucket.org:thinkwrap/exfo-tw-docker-jenkins.git
FARO|git@bitbucket.org:thinkwrap/faro-infrastructure.git
H3|git@bitbucket.org:thinkwrap/headless-api-gateway.git
H3|git@bitbucket.org:thinkwrap/headless-cart-service.git
H3|git@bitbucket.org:thinkwrap/headless-catalog-service.git
H3|git@bitbucket.org:thinkwrap/headless-connector-atg.git
H3|git@bitbucket.org:thinkwrap/headless-connector-contentful.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first field is the project prefix, and the second is the SSH url for cloning the repository.  They are separated by the | character.&lt;/p&gt;
&lt;p&gt;Cloning is trivial:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;python3 ./process_repos.py NAME-OF-THE-CONTROL-FILE ....

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;python3 ./process_repos.py pivotree_h3.bb-repo2 pvtrlabs.gh-repo 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Python script uses &lt;code&gt;../MIRROR&lt;/code&gt; as the starting point for the mirrored tree.&lt;/p&gt;
&lt;p&gt;This can be changed by exporting the variable &lt;code&gt;MIRROR_ROOT&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;export MIRROR_ROOT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;../MIRROR2&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The generated structure looks like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PLAFORM &amp;gt; ACCOUNT &amp;gt; PROJECT &amp;gt; REPO&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PLATFORM is &lt;code&gt;bitbucket.org&lt;/code&gt; or &lt;code&gt;github.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Account is organization name within the platform&lt;/li&gt;
&lt;li&gt;PROJECT is project name for Bitbucket, defaults to &amp;lsquo;src&amp;rsquo; for GitHub&lt;/li&gt;
&lt;li&gt;REPO is the repository name&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NOTE: the names of some projects are &amp;lt; edited &amp;gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;.
├── bitbucket.org
│   ├── pivotree_h3
│   │   ├── BrownBagExamples
│   │   │   └── apigateway
│   │   ├── DATA
│   │   │   └── sample-data-aws
│   │   ├── DIVE
│   │   │   ├── customer-mgmt-api
│   │   │   ├── data-science-practice
...
│   │   │   ├── pvt-admin-mgmt-api
│   │   │   └── sagemaker-microservices
│   │   ├── DIVE20
│   │   │   ├── dive-data-manager
...
│   │   │   └── tr-sgm-duplicates-svc
│   │   ├── DIVECX
│   │   │   ├── dive-cx-account
│   │   │   ├── dive-cx-account-fork
...
│   │   │   └── pvt-ssm-manager
│   │   └── starter
│   │       ├── pvt-node-module-starter
│   │       ├── pvt-node-starter
│   │       ├── pvt-pipeline-example
│   │       └── pvt-sls-starter
│   └── thinkwrap
│       ├── &amp;lt;PRJ&amp;gt;-CLOUD
│       │   └── &amp;lt;prj&amp;gt;-cloud
│       ├── Admin
│       │   └── tw-bitbucket-admin
│       ├── &amp;lt;PROJECT_1&amp;gt;
│       │   ├── &amp;lt;prj1&amp;gt;-infra
│       │   └── &amp;lt;prj1&amp;gt;-robot
│       ├── BOPIS
│       │   ├── bopis_automation_platform
│       │   └── pvt-bopis
│       ├── &amp;lt;PRJ2&amp;gt;
│       │   └── &amp;lt;prj2&amp;gt;-vtex-poc
│       ├── &amp;lt;PRJ3&amp;gt;
...
│       │   └── &amp;lt;prj4&amp;gt;-testautomation
│       ├── ZZZ-Archived-Repos
│       │   └── oneclick-starter
│       └── microbase
│           ├── micro-alexa-search
│           ├── micro-alexa-search-skill
│           ├── micro-backoffice
│           ├── micro-cart-service
│           ├── micro-catalog-service
│           ├── micro-customer-service
│           ├── micro-docker-nginx
│           ├── micro-docker-service
│           ├── micro-oauth-service
│           ├── micro-payment-service
│           ├── micro-promotion-service
│           ├── micro-recommendation-service
│           ├── micro-stock-service
│           ├── micro-tax-service
│           ├── microbase
│           └── www.microbase.io
└── github.com
    ├── pivotree-tech-blog
    │   └── src
    │       ├── hugo101
    │       ├── pivotree-tech-blog-source-poc
    │       ├── pivotree-tech-blog.github.io
    │       └── story
    ├── pvtrlabs
    │   └── src
    │       ├── action-skip-ci
    │       ├── at-aws-onelogin-multiapp
    │       ├── at-cloudhealth
    │       ├── at-opsgenie-integrations
....    
    │       ├── terraform-tfe-workspace
    │       ├── terraform-tfe-workspace-full
    │       ├── test-limited-tfc-access
    │       └── test-repo
    └── thinkwrap
        └── src
            ├── ML-Live-Beginner
            ├── ML-Live-Intermediate
            ├── Tiny-Python-3.6-Notebook
            ├── aaac-starter-template
            ├── aws-cost-and-usage-report
            ├── aws-ml-guide
            ├── blast-radius
            ├── docker-aws-cli
            ├── docker-kubernetes-cli
            ├── docker-kubernetes-cli-helm
            ├── docker-node-base-pipelines
            ├── docker-node-sls-pipelines
            ├── docker-node-sls-pipelines-aws
            ├── docker-python-base-pipelines
            ├── docker-sls-cli
            ├── docker-terraform-cli
            ├── docker-terraform-cli-helm
            ├── ecs-deep-dive-2018
            ├── kubernetes-in-action
            ├── programming-with-data
            ├── sgviz
            ├── ssm-parameter-store
            ├── terraform-ecs-fargate
            └── universal-recommender

549 directories, 0 files

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;updating&#34;&gt;Updating&lt;/h2&gt;
&lt;p&gt;If the Python script encounters an existing repository, it tries to do an update by fetching the remote updates. It does NOT merge.&lt;/p&gt;
</description>
		</item>
		
		<item>
			<title>How to list Github repositories and users</title>
			<link>https://blog.pivotree.cloud/2021-02-16-github-list-repos/</link>
			<pubDate>Tue, 16 Feb 2021 13:00:00 &#43;0800</pubDate>
			<author>Pivotree Team</author>
			<guid>https://blog.pivotree.cloud/2021-02-16-github-list-repos/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pivotree.cloud/img/dan-meyers-PB_B76Ps14Y-unsplash.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description>&lt;h1 id=&#34;how-to-list-repositories-in-github&#34;&gt;How to list repositories in GitHub&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Use Case&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;I want to maintain repositories in an organization in GitHub.  To make sure I do not miss newly added ones,
I want to use API access to retrieve the list of repositories in the organization.&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;GitHub requires a token to access the API.  This token is stored in an environment variable
&lt;code&gt;github_token&lt;/code&gt; and can be generated in the user profile section - settings - developer settings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/bbgh/access-tokens.png&#34; alt=&#34;app password ui&#34;&gt;&lt;/p&gt;
&lt;p&gt;The variable &lt;code&gt;gh&lt;/code&gt; represents the GitHub API URL.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;export gh&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;https://api.github.com
export github_token&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-secret-token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I am using a personal shortcut by creating the file &lt;code&gt;~/.ssh/github-token.secret&lt;/code&gt; with the content described above and importing them, unless the variables are already defined:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$github_token&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  echo importing the token from ~/.ssh/github-token.secret
. ~/.ssh/github-token.secret&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$github_token&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;you must export variable github_token &amp;#34;&lt;/span&gt;
    exit &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;retrieving-the-list-of-organizations&#34;&gt;Retrieving the list of organizations&lt;/h2&gt;
&lt;p&gt;With the configuration done above, you can run this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl -s -h &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;accept: application/vnd.github.v3+json&amp;#34;&lt;/span&gt; -h &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;authorization: token &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;github_token&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;gh&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/user/orgs&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.[].login&amp;#39;&lt;/span&gt; | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/&amp;#34;//g&amp;#39;&lt;/span&gt;
---
thinkwrap
pvtrlabs
pivotree-tech-blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output is list of all organizations for the currently authenticated user.&lt;/p&gt;
&lt;p&gt;the full script - &lt;code&gt;./gh-teams.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$github_token&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  echo using token github_token from ~/.ssh/github-token.secret
. ~/.ssh/github-token.secret
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$ghteams&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#echo my teams&lt;/span&gt;
curl -s -h &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;accept: application/vnd.github.v3+json&amp;#34;&lt;/span&gt; -h &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;authorization: token &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;github_token&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;gh&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/user/orgs&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.[].login&amp;#39;&lt;/span&gt; | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/&amp;#34;//g&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
 echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$ghteams&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output is list of all teams for the currently authenticated user.&lt;/p&gt;
&lt;p&gt;example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./gh-teams.sh
thinkwrap
pvtrlabs
pivotree-tech-blog

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;retrieving-the-list-of-repositories-for-an-organization&#34;&gt;Retrieving the list of repositories for an organization&lt;/h2&gt;
&lt;p&gt;With the configuration done above, you can run this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt; curl -s  -h &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;accept: application/vnd.github.v3+json&amp;#34;&lt;/span&gt; -h &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;authorization: token &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;github_token&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;gh&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/orgs/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/repos?per_page=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;pagelen&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;amp;page=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where &lt;code&gt;username&lt;/code&gt; is the name of the organization or user that owns the repositories.&lt;/p&gt;
&lt;p&gt;For this call we need to use paging because the default count of results GitHub returns is 30.
We can retrieve the counts of repositories from the organization metadata.&lt;/p&gt;
&lt;p&gt;We need to loop for every page and store the JSON retrieved in temporary files.  These JSON files are
then processed and generate the &lt;code&gt;.gh-repos&lt;/code&gt; file in the same format as the BitBucket case:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;projectname|git_url&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;src|git@github.com:pivotree-tech-blog/hugo101.git
src|git@github.com:pivotree-tech-blog/pivotree-tech-blog-source-poc.git
src|git@github.com:pivotree-tech-blog/pivotree-tech-blog.github.io.git
src|git@github.com:pivotree-tech-blog/story.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The script expects 1 argument - the name of the organization or user:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;set -e

progname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;basename $0&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

die&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$progname&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;$*&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

usage&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$*&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error: &lt;/span&gt;$*&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

    cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; eof
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;usage: $progname [option ...] gh-team-or-user-name
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;generate the list of the repositiories for given team or used
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;options:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-h, --help             display this usage message and exit
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-d, --debug            set debug = true
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;eof&lt;/span&gt;

    exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

debug&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;undefined&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $# -eq &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    echo missing argument: github team
    usage
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $# -gt &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; in
    -h|--help&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        usage
        ;;
    -d|--debug&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        debug&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        ;;
    -*&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        usage &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unknown option &amp;#39;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;
        ;;
    *&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$username&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;undefined&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
            username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
            usage &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;too many arguments&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
        ;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;esac&lt;/span&gt;
    shift
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$github_token&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  echo importing the token from ~/.ssh/github-token.secret
. ~/.ssh/github-token.secret&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$github_token&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;you must export variable github_token &amp;#34;&lt;/span&gt;
    exit &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;# display info about the user&lt;/span&gt;

echo logged on as user
curl -s -h  -h &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;accept: application/vnd.github.v3+json&amp;#34;&lt;/span&gt; -h &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;authorization: token &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;github_token&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;gh&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/user&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{login, id, html_url, name, public_repos, total_private_repos}&amp;#39;&lt;/span&gt;


curl -s -h  -h &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;accept: application/vnd.github.v3+json&amp;#34;&lt;/span&gt; -h &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;authorization: token &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;github_token&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;gh&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/orgs/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    &amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-ghteam-info.json

echo team info - see &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-ghteam-info.json

&lt;span style=&#34;color:#75715e&#34;&gt;# produce list of the repositories in format slug=repo&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# echo curl -s -u $creds &amp;#34;${bb}/${team}?pagelen=${pagelen}&amp;#34;&lt;/span&gt;
entries&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s -h  -h &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;accept: application/vnd.github.v3+json&amp;#34;&lt;/span&gt; -h &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;authorization: token &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;github_token&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;gh&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/orgs/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[.total_private_repos, .public_repos] | add&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
pagelen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
pages&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;expr $entries / $pagelen &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt; 1&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

echo the team $username has $entries repos in $pages pages

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;seq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; $pages&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      curl -s  -h &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;accept: application/vnd.github.v3+json&amp;#34;&lt;/span&gt; -h &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;authorization: token &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;github_token&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;gh&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/orgs/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/repos?per_page=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;pagelen&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;amp;page=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-repo-&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.json
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;seq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; $pages&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; 
    jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.[].ssh_url&amp;#39;&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-repo-&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.json | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/&amp;#34;//g&amp;#39;&lt;/span&gt; | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print &amp;#34;src|&amp;#34; $1 }&amp;#39;&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.repos
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;

rm -f &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-repo-*.json

&lt;span style=&#34;color:#75715e&#34;&gt;# make sure the file is empty/none - we will append&lt;/span&gt;
rm -f &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.gh-repos

cat &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-*.repos | sort &amp;gt;&amp;gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.gh-repos

rm &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-*.repos

echo see &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.gh-repos
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
		</item>
		
		<item>
			<title>How to list Bitbucket repositories and users</title>
			<link>https://blog.pivotree.cloud/2021-02-15-bitbucket-list-repos/</link>
			<pubDate>Mon, 15 Feb 2021 13:00:00 &#43;0800</pubDate>
			<author>Pivotree Team</author>
			<guid>https://blog.pivotree.cloud/2021-02-15-bitbucket-list-repos/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pivotree.cloud/img/liam-shaw-w6_OGAdxDj8-unsplash.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description>&lt;h1 id=&#34;how-to-list-repositories-in-bitbucket&#34;&gt;How to list repositories in Bitbucket&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Use case&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;I want to maintain repositories in an organization in Bitbucket. To make sure I do not miss newly added ones,
I want to use API access to retrieve the list of all repositories in the organization.&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;Bitbucket requires a username and password to access the API. This information is stored in the environment variables
&lt;code&gt;BBUSER&lt;/code&gt; and &lt;code&gt;BBPASSWORD&lt;/code&gt;. The &lt;code&gt;BBPASSWORD&lt;/code&gt; should be an access token / app password defined in the &lt;code&gt;App passwords&lt;/code&gt; section
of the user settings:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/bbgh/app-password.png&#34; alt=&#34;app password UI&#34;&gt;&lt;/p&gt;
&lt;p&gt;The variable &lt;code&gt;BB&lt;/code&gt; contains the Bitbucket API URL&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export BBUSER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-user-name&amp;gt;
export BBPASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-user-token&amp;gt;
export BB&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://api.bitbucket.org/2.0&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I am using a personal shortcut by creating the file &lt;code&gt;~/.ssh/bitbucket-token-work.secret&lt;/code&gt; with the contents described above and importing them, unless the variables are already defined:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBUSER&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBPASSWORD&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  echo Using locally defined credentials from ~/.ssh/bitbucket-token-work.secret 
. ~/.ssh/bitbucket-token-work.secret
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;getting-list-of-organizations&#34;&gt;Getting list of organizations&lt;/h2&gt;
&lt;p&gt;With the configuration done above, you can run this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -s -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBUSER&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;$BBPASSWORD&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/teams?role=member&amp;#34;&lt;/span&gt; | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.values[].username&amp;#39;&lt;/span&gt; | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/&amp;#34;//g&amp;#39;&lt;/span&gt;
---
thinkwrap
tenzingcom
pivotree_h3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output is a list of all organizations for the currently authenticated user.&lt;/p&gt;
&lt;p&gt;The full script - &lt;code&gt;./bb-teams.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBUSER&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBPASSWORD&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  echo Using locally defined credentials from ~/.ssh/bitbucket-token-work.secret 
. ~/.ssh/bitbucket-token-work.secret
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBTEAMS&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
curl -s -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBUSER&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;$BBPASSWORD&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/teams?role=member&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.values[].username&amp;#39;&lt;/span&gt; | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/&amp;#34;//g&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBTEAMS&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output is a list of all team for the currently authenticataed user.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;✗ ./bb-teams.sh 
thinkwrap
tenzingcom
pivotree_h3

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;getting-list-of-users-for-an-organization&#34;&gt;Getting list of users for an organization&lt;/h2&gt;
&lt;p&gt;With the configuration done above, you can run this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
curl -s --user $BBUSER:$BBPASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/teams/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;org&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/members&amp;#34;&lt;/span&gt; | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.values[].display_name&amp;#39;&lt;/span&gt;
---
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Axxxxx Chxxxx&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dxx Axx Oxxx&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Axxxx Kxx&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Axxxx Ixxxx Esxxxx&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Axxx Rxxx Exxxx&amp;#34;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The number of users can be large so we need to handle paging, using request parameters (the $org variable is name of the team):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ENTRIES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s --user $BBUSER:$BBPASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/teams/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;org&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/members?limit=100&amp;#34;&lt;/span&gt; | jq .size&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
PAGELEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s --user $BBUSER:$BBPASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/teams/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;org&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/members?limit=100&amp;#34;&lt;/span&gt; | jq .pagelen&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
PAGES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;expr $ENTRIES / $PAGELEN &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt; 1&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
---
echo $org $ENTRIES $PAGELEN $PAGES
thinkwrap &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The JSON returned by &lt;code&gt;/teams/$org/members&lt;/code&gt; contains 3 entries - pagelen, size and an array of records:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl -s --user $BBUSER:$BBPASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/teams/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;org&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/members?limit=100&amp;#34;&lt;/span&gt; | jq . | head
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pagelen&amp;#34;&lt;/span&gt;: 50,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: 120,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;values&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;display_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Axxx Chxxxx&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;has_2fa_enabled&amp;#34;&lt;/span&gt;: null,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;links&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hooks&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.bitbucket.org/2.0/users/%7Bd6383ed0-xxxxxx-bb56d6a%7D/hooks&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will run the requests inside a loop to store each result in a temporary file, and then concatenate them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBUSER&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBPASSWORD&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  echo Using locally defined credentials from ~/.ssh/bitbucket-token-work.secret 
. ~/.ssh/bitbucket-token-work.secret
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; org in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;./bb-teams.sh &lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  ENTRIES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s --user $BBUSER:$BBPASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/teams/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;org&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/members?limit=100&amp;#34;&lt;/span&gt; | jq .size&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
  PAGELEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s --user $BBUSER:$BBPASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/teams/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;org&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/members?limit=100&amp;#34;&lt;/span&gt; | jq .pagelen&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
  PAGES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;expr $ENTRIES / $PAGELEN &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt; 1&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

  rm $org-members-*.json 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;seq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; $PAGES&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; 
        curl -s --user $BBUSER:$BBPASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/teams/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;org&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/members?pagelen=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PAGELEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;amp;page=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.values[].display_name&amp;#39;&lt;/span&gt; | tee $org-members-&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.json
    &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
  
  rm &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;org&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.users
  cat $org-members-*.json  &amp;gt;&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;org&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.users

  rm $org-members-*.json
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This script creates multiple output files &lt;code&gt;${org}.users&lt;/code&gt; - e.g. &lt;code&gt;thinkwrap.users&lt;/code&gt; containing the users in each group.&lt;/p&gt;
&lt;h2 id=&#34;retrieving-repositories-for-an-organization&#34;&gt;Retrieving repositories for an organization&lt;/h2&gt;
&lt;p&gt;With the configuration done above, you can run this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl -s --user $BBUSER:$BBPASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/repositories/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where &lt;code&gt;username&lt;/code&gt; is name of the organization or name of the user that owns the repositories.&lt;/p&gt;
&lt;p&gt;As with users, the JSON response contains 3 keys: size, pagelen and an array of values.  These need to be retrieved
first and used in consequent calls:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Produce list of the repositories in format slug=REPO&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# echo curl -s -u $CREDS &amp;#34;${BB}/${TEAM}?pagelen=${PAGELEN}&amp;#34;&lt;/span&gt; 
ENTRIES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s --user $BBUSER:$BBPASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/repositories/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; | jq .size&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
PAGELEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s --user $BBUSER:$BBPASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/repositories/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; | jq .pagelen&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
PAGES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;expr $ENTRIES / $PAGELEN &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt; 1&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

echo The TEAM $username has $ENTRIES repos

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;seq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; $PAGES&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; 
        curl -s --user $BBUSER:$BBPASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/repositories/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\?&lt;/span&gt;page&lt;span style=&#34;color:#ae81ff&#34;&gt;\=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;amp;&lt;/span&gt;pagelen&lt;span style=&#34;color:#ae81ff&#34;&gt;\=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PAGELEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-REPO-&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.json
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;seq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; $PAGES&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; 
    jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.values[].links.clone[].href&amp;#39;&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-REPO-&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.json | grep -v https | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/&amp;#34;//g&amp;#39;&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.repos
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Make sure the file is empty/none - we will append&lt;/span&gt;
rm -f &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.bb-repos

cat &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-*.repos | sort &amp;gt;&amp;gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.bb-repos

rm &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-*.repos

echo See &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.bb-repos
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The script first produces one temporary file per page containing repository information named &lt;code&gt;${username}-REPO-${i}.json&lt;/code&gt;.
From these files, the second loop extracts only clone links &lt;code&gt;.values[].links.clone[].href&lt;/code&gt; for SSH access and stores them in a second temporary file
named ${username}-${i}.repos. These are then concatenated and sorted, and one file per organization (or user) is generated named &lt;code&gt;${org}.bb-repos&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The script expects 1 argument - the name of the organization or user:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;set -e

PROGNAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;basename $0&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

die&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$PROGNAME&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;$*&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

usage&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$*&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error: &lt;/span&gt;$*&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

    cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Usage: $PROGNAME [OPTION ...] BB-TEAM-OR-USER-NAME
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Generate the list of the repositiories for given team or used
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Options:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-h, --help             display this usage message and exit
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-d, --debug            set debug = true
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;

    exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

debug&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;undefined&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $# -eq &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    echo Missing argument: BB user name or team
    usage
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $# -gt &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; in
    -h|--help&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        usage
        ;;
    -d|--debug&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        debug&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        ;;
    -*&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        usage &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unknown option &amp;#39;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;
        ;;
    *&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$username&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;undefined&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
            username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
            usage &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Too many arguments&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
        ;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;esac&lt;/span&gt;
    shift
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBUSER&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBPASSWORD&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
. ~/.ssh/bitbucket-token-work.secret
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBUSER&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBPASSWORD&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You must export variables BBUSER and BBPASSWORD&amp;#34;&lt;/span&gt;
    exit &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

export CREDS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBUSER&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;$BBPASSWORD&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Display info about the user&lt;/span&gt;

echo Logged on as user
curl -s -u $CREDS &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/user&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{account_id, uuid, username, display_name, snippets: .links.snippets.href, self: .links.self.href}&amp;#39;&lt;/span&gt; 


curl -s -u $CREDS &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/teams/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{ uuid, username, display_name, snippets: .links.snippets.href, self: .links.self.href}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    &amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-team-info.json

echo Team info - see &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-team-info.json

&lt;span style=&#34;color:#75715e&#34;&gt;# Produce list of the repositories in format slug=REPO&lt;/span&gt;
ENTRIES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s --user $BBUSER:$BBPASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/repositories/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; | jq .size&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
PAGELEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s --user $BBUSER:$BBPASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/repositories/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; | jq .pagelen&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
PAGES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;expr $ENTRIES / $PAGELEN &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt; 1&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

echo The TEAM $username has $ENTRIES repos

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;seq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; $PAGES&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; 
        curl -s --user $BBUSER:$BBPASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BB&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/repositories/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\?&lt;/span&gt;page&lt;span style=&#34;color:#ae81ff&#34;&gt;\=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;amp;&lt;/span&gt;pagelen&lt;span style=&#34;color:#ae81ff&#34;&gt;\=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PAGELEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-REPO-&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.json
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;seq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; $PAGES&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; 
    jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.values[].links.clone[].href&amp;#39;&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-REPO-&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.json | grep -v https | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/&amp;#34;//g&amp;#39;&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.repos
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;

rm -f &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-REPO-*.json

&lt;span style=&#34;color:#75715e&#34;&gt;# Make sure the file is empty/none - we will append&lt;/span&gt;
rm -f &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.bb-repos

cat &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-*.repos &amp;gt;&amp;gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.bb-repos

rm &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-*.repos

echo See &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.bb-repos
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It also generates the &lt;code&gt;${org}-team-info.json&lt;/code&gt; file with basic information about the team:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;uuid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{c4xxxxxxxxxxx10d612}&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thinkwrap&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;display_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pivotree&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;snippets&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.bitbucket.org/2.0/snippets/%7Bc4xxxxxxxxxx10d612%7D&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;self&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.bitbucket.org/2.0/teams/%7Bc4xxxxxxxxxxx10d612%7D&amp;#34;&lt;/span&gt;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Example of the run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;➜ ./bb-repos-info-json.sh pivotree_h3
Logged on as user
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;account_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;557058:xxxxxxxxx-e6ce68c69dda&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uuid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{d8-xxxxxxx-08}&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;username&amp;gt;&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;display_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Miro Adamy&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;snippets&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.bitbucket.org/2.0/snippets/%7Bd8-xxxxxxx-08%7D&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;self&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.bitbucket.org/2.0/users/%7Bd8-xxxxxxx-08%7D&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
Team info
See pivotree_h3-team-info.json
The TEAM pivotree_h3 has &lt;span style=&#34;color:#ae81ff&#34;&gt;152&lt;/span&gt; repos in &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; pages
See pivotree_h3.bb-repos
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;automation&#34;&gt;Automation&lt;/h2&gt;
&lt;p&gt;The script &lt;code&gt;./bb-repo-links.sh&lt;/code&gt; generates the information for all organizations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBUSER&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BBPASSWORD&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  echo Using locally defined credentials from ~/.ssh/bitbucket-token-work.secret 
. ~/.ssh/bitbucket-token-work.secret
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; org in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;./bb-teams.sh &lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    ./bb-repos-info-json.sh $org
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
		</item>
		
		<item>
			<title>Documentation with Auth0 and Gatsby</title>
			<link>https://blog.pivotree.cloud/2020-11-24-documentation-gatsby/</link>
			<pubDate>Tue, 24 Nov 2020 13:00:00 &#43;0800</pubDate>
			<author>Pivotree Team</author>
			<guid>https://blog.pivotree.cloud/2020-11-24-documentation-gatsby/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pivotree.cloud/img/unsplash-photos-vHnVtLK8rCc.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description>&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;With modern technologies and available Frameworks, we have successfully eliminated the complexities involved in building an end to end Application and have eased the entire development and deployment process to a great extent. As we finish writing the Application and our next goal is to publish it as an open source project or push it to production, a major component that will make the code more appealing and useful is having a proper documentation about the nitty-gritty involved in the development process.&lt;/p&gt;
&lt;p&gt;Few days back a similar requirement came up in my team and I was asked to build an application that can host our internal documents (markdown pages) and implement a secure layer to restrict the access to teams / Pivotree specific users.&lt;/p&gt;
&lt;p&gt;An application that was earlier used to manage the markdown contents was MkDocs, which implements Pyhton-Markdown library to render Markdown documents to HTML. It was hosted on AWS Amplify and secured using basic Access Control for amplify hosted applications. Although it was working flawlessly, the challenge was to put a more secure layer of Authentication on top of it (e.g. OneLogin, Cognito, Auth-0). This application was using shared credentials which restricts its usability to wider audience.&lt;/p&gt;
&lt;p&gt;To keep things simple, we started doing some research and came up with an alternative which is built on top of React JS called Gatsby. But before we jump on the development/implementation, we need to get familiar with few components involved in building an application using Gatsby.&lt;/p&gt;
&lt;h2 id=&#34;static-site-generator---gatsby&#34;&gt;Static Site Generator - Gatsby&lt;/h2&gt;
&lt;p&gt;In a conventional 3-Tier monolithic/ microservice architecture we have a Front-End hosted on a webserver like Apache or Nginx as Tier-1, a middle-tier which has the application/ services and Tier-3 which is composed of the back-end databases. Whenever a call is made from the client, the request goes all the way to database and fetches the data for the UI. This sometimes can degrade the application performance based on the time spend on back-end query execution, query execution plan and the volume of the requested data.&lt;/p&gt;
&lt;p&gt;Gatsby on the other hand precomputes all states in this case, assets and dynamic content or data so webpage loads are blazing fast. This is implemented using JAMstack architecture, which pre-delivers stable markup to render the page structure and appearance and then uses JavaScript-based client-side service workers to serve up dynamic content via APIs. The Gatsby framework anticipates what is likely to be requested next, then starts to fetch and preload that content in the background before it’s even requested by the browser.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/gatsby_img/Jamstack.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;graphql&#34;&gt;GraphQL&lt;/h2&gt;
&lt;p&gt;Gatsby uses GraphQL to pull data from the markdown files. The result of the query (JSON output) is injected by Gatsby into the Template component as data.&lt;/p&gt;
&lt;h3 id=&#34;sample-query&#34;&gt;Sample Query&lt;/h3&gt;
&lt;h4 id=&#34;input&#34;&gt;Input&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
  hero(episode: $episode) {
    name
    friends {
      name
    }
  }
}

{
  &amp;quot;episode&amp;quot;: &amp;quot;JEDI&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;output&#34;&gt;Output&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;hero&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;R2-D2&amp;quot;,
      &amp;quot;friends&amp;quot;: [
        {
          &amp;quot;name&amp;quot;: &amp;quot;Luke Skywalker&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Han Solo&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Leia Organa&amp;quot;
        }
      ]
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;starting-with-gatsby&#34;&gt;Starting with Gatsby&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Fork a theme that we want to use as per the requirement from starter libraries- Here&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;git clone &amp;lt;Repository_Link&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Navigate into your new site&amp;rsquo;s directory&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt; cd &amp;lt;project_folder_path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Install all dependencies mentioned in package.json (if any) for the downloaded starter code.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;  yarn install
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Run the project on local server using  below command.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;gatsby develop
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;If everything worked fine we should be getting the app served at localhost:8000.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/gatsby_img/Terminal.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;We can create a separate branch for version control (Git, Bitbucket, etc.) and push our changes accordingly.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;architecture---gatsby-application&#34;&gt;Architecture - Gatsby Application&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/gatsby_img/SSG.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Below screenshot shows the working directory structure and high-level view of the authentication code used to secure the application. Before we dive deep into authentication implentation let&amp;rsquo;s have some basic understanding on the individual components like Auth-0 and OneLogin.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/gatsby_img/Workspace.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;authentication&#34;&gt;Authentication&lt;/h2&gt;
&lt;h3 id=&#34;auth0&#34;&gt;Auth0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Auth0 is a flexible and easy to use solution to add authentication and authorization services to our applications.&lt;/li&gt;
&lt;li&gt;We can connect any application (written in any language or on any stack) to Auth0 and define the identity providers you want to use (how you want your users to log in).&lt;/li&gt;
&lt;li&gt;Each time a user tries to authenticate, Auth0 will verify their identity and send the required information back to your app.&lt;/li&gt;
&lt;li&gt;We can use Auth0 for free with up to 7,000 active users, unlimited logins.&lt;/li&gt;
&lt;li&gt;To get started with Auth-0 we can register on their website&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and start using the service.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;onelogin&#34;&gt;OneLogin&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OneLogin Single Sign-On uses Security Assertion Markup Language (SAML) to simplify the login process.&lt;/li&gt;
&lt;li&gt;The single sign-on services provided by OneLogin is very helpful and of vital importance while rolling out new applications to the whole organization, no matter the location or time zone.&lt;/li&gt;
&lt;li&gt;Allow end-users to login to OneLogin using their Social Identity Provider credentials from services such as Facebook, Google, LinkedIn, and Amazon.&lt;/li&gt;
&lt;li&gt;SSO saves time and energy because users are not required to repeatedly log into multiple applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;console---auth0-and-onelogin&#34;&gt;Console - Auth0 and OneLogin&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/gatsby_img/console.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;frontmatter---metadata-in-markdown-files&#34;&gt;Frontmatter - Metadata in Markdown Files&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;---
path: &amp;quot;/account/architect-and-design/aws-account-strategy&amp;quot;
type: &amp;quot;pdocs&amp;quot;
---

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;template---to-display-markdown-to-html-post-authentication&#34;&gt;Template - To Display Markdown to HTML post Authentication&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; function Template ({data}) {
    if (!isAuthenticated()) {
        login()
        return &amp;lt;p&amp;gt;Redirecting to login...&amp;lt;/p&amp;gt;
      }

      const { markdownRemark } = data
      const { frontmatter, html } = markdownRemark
      //const user = getProfile()
     
    
    return (
        &amp;lt;Layout&amp;gt;
        &amp;lt;SEO title={frontmatter.title} /&amp;gt;

        &amp;lt;h1&amp;gt;{frontmatter.title}&amp;lt;/h1&amp;gt;
        &amp;lt;div 
            dangerouslySetInnerHTML={{ __html: html }}
        /&amp;gt;
        &amp;lt;/Layout&amp;gt;
    )
  }

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;securing-the-central-component&#34;&gt;Securing the central component&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;import React from &amp;quot;react&amp;quot;
import { Router } from &amp;quot;@reach/router&amp;quot;
import { login,isAuthenticated, getProfile } from &amp;quot;../utils/auth&amp;quot;
import Layout from &amp;quot;../components/layout&amp;quot;

const Home = ({ user }) =&amp;gt; {    
return &amp;lt;p&amp;gt;This static site has all necessary information about Platform Engineering in Pivotree...&amp;lt;/p&amp;gt;
}

const Account = () =&amp;gt; {
  if (!isAuthenticated()) {
    login()
    return &amp;lt;p&amp;gt;Redirecting to login...&amp;lt;/p&amp;gt;
  }

  const user = getProfile()
 
  return (
  &amp;lt;Layout&amp;gt;
    &amp;lt;&amp;gt;
      &amp;lt;Router&amp;gt;
        &amp;lt;Home path=&amp;quot;/account/&amp;quot; user={user} component={Home}/&amp;gt;
      &amp;lt;/Router&amp;gt;
    &amp;lt;/&amp;gt;
    &amp;lt;/Layout&amp;gt;
  )
}

export default Account

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;authjs&#34;&gt;Auth.js&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;import auth0 from &amp;quot;auth0-js&amp;quot;
import { navigate } from &amp;quot;gatsby&amp;quot;

const isBrowser = typeof window !== &amp;quot;undefined&amp;quot;

const auth = isBrowser
  ? new auth0.WebAuth({
      domain: process.env.AUTH0_DOMAIN,
      clientID: process.env.AUTH0_CLIENTID,
      redirectUri: process.env.AUTH0_CALLBACK,
      responseType: &amp;quot;token id_token&amp;quot;,
      scope: &amp;quot;openid profile email&amp;quot;,
    })
  : {}

  const tokens = {
    accessToken: false,
    idToken: false,
    expiresAt: false,
  }
  
  let user = {}
  
  export const isAuthenticated = () =&amp;gt; {
    if (!isBrowser) {
      return;
    }
  
    return localStorage.getItem(&amp;quot;isLoggedIn&amp;quot;) === &amp;quot;true&amp;quot;
  }
  
  export const login = () =&amp;gt; {
    if (!isBrowser) {
      return
    }
  
    auth.authorize()
  }
  
  const setSession = (cb = () =&amp;gt; {}) =&amp;gt; (err, authResult) =&amp;gt; {
    if (err) {
      navigate(&amp;quot;/&amp;quot;)
      cb()
      return
    }
  
    if (authResult &amp;amp;&amp;amp; authResult.accessToken &amp;amp;&amp;amp; authResult.idToken) {
      let expiresAt = authResult.expiresIn * 1000 + new Date().getTime()
      tokens.accessToken = authResult.accessToken
      tokens.idToken = authResult.idToken
      tokens.expiresAt = expiresAt
      user = authResult.idTokenPayload
      localStorage.setItem(&amp;quot;isLoggedIn&amp;quot;, true)
      navigate(&amp;quot;/account&amp;quot;)
      cb()
    }
  }
  
  export const handleAuthentication = () =&amp;gt; {
    if (!isBrowser) {
      return;
    }
  
    auth.parseHash(setSession())
  }
  
  export const getProfile = () =&amp;gt; {
    return user
  }


  export const silentAuth = callback =&amp;gt; {
    if (!isAuthenticated()) return callback()
    auth.checkSession({}, setSession(callback))
  }

  export const logout = () =&amp;gt; {
    localStorage.setItem(&amp;quot;isLoggedIn&amp;quot;, false)
    auth.logout()
  }

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;the-application-is-now-secured-with-auth0-and-sso-enabled-using-onelogin&#34;&gt;The Application is now secured with Auth0 and SSO enabled using OneLogin&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/gatsby_img/Auth0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;hosting&#34;&gt;Hosting&lt;/h2&gt;
&lt;p&gt;There are multiple options available to host the website like GatsbyCloud, Netlify, S3, Heroku and many more. However, I always find it easy and interesting to deploy using AWS Amplify. Although it&amp;rsquo;s my personal preference you can always use any of the above mentioned.&lt;/p&gt;
&lt;p&gt;Deploying an application through Amplify can be done using both Amplify CLI and console. Here are some basic commands to deploy using CLI.&lt;/p&gt;
&lt;p&gt;In the project folder we must initialize the Amplify using &lt;strong&gt;amplify init&lt;/strong&gt;.
After this we can add hosting using &lt;strong&gt;amplify add hosting&lt;/strong&gt;. Since in this scenario I have used Auth-0 for authentication, however as an alternative we can also use Amazon Cognito for authentication using &lt;strong&gt;amplify add auth&lt;/strong&gt; and further configure it with SAML, Google, Facebook or Amazon as Federated Identity providers. We can modify the &lt;strong&gt;amplify.yaml&lt;/strong&gt; file as per our build requirements.&lt;/p&gt;
&lt;h3 id=&#34;detailed-steps-to-host-the-website-using-amplify-console&#34;&gt;Detailed steps to host the website using Amplify console:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Log in to the AWS Account, navigate to Amplify Console and choose Get Started under Deploy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connect a branch from your GitHub, Bitbucket or GitLab repository. Connecting your repository allows Amplify to deploy updates on every code commit to a branch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Accept the default build settings. Give the Amplify Console permission to deploy backend resources with your frontend with a service role. This allows the Console to detect changes to both your backend and frontend on every code commit and make updates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Review your changes and then choose Save and deploy. The Amplify Console will pull code from your repository, build changes to the backend and frontend, and deploy your build artifacts at &lt;a href=&#34;https://master.unique-id.amplifyapp.com&#34;&gt;https://master.unique-id.amplifyapp.com&lt;/a&gt;. Bonus: Screenshots of your app on different devices to find layout issues.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/gatsby_img/Amplify.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.gatsbyjs.com/starters/?v=2&#34;&gt;Gatsby Starter Libraries&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://auth0.com/&#34;&gt;Auth0&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
		</item>
		
		<item>
			<title>Documenting multi-repository projects</title>
			<link>https://blog.pivotree.cloud/2020-11-23-documentation-multi-repo/</link>
			<pubDate>Mon, 23 Nov 2020 13:00:00 &#43;0800</pubDate>
			<author>Pivotree Team</author>
			<guid>https://blog.pivotree.cloud/2020-11-23-documentation-multi-repo/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pivotree.cloud/img/griffin-keller--mNvCsNlsSE-unsplash2.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description>&lt;p&gt;This blog post is a de-powerpointized version of a brownbag session in Pivotree. The goal
was to increase awareness of tools and techniques for information / knowledge capture in the projects, specifically focusing on producing quality documentation so that everybody in project can access it and contribute to it,
not only developers. We wanted to look at the tools that would allow engineers keep using their tools of trade
(without impact on developer’s productivity) and at the same time make the information available without
duplication of work to increase re-findability of information.&lt;/p&gt;
&lt;p&gt;We are introducing standards, tools and best practices for documentation and suggesting workflow that can
simplify and streamline the process of creating a documentation and keeping it up to date.&lt;/p&gt;
&lt;h2 id=&#34;why-documentation-is-important&#34;&gt;Why documentation is important&lt;/h2&gt;
&lt;p&gt;In commercial environment, quality (and often existence) of documentation is important factor in determining
what will be the cost of maintaining the codebase.&lt;/p&gt;
&lt;p&gt;Whether or not the documentation is available / complete / up-to-date can greatly impact:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;whether the code will be correctly used&lt;/li&gt;
&lt;li&gt;how fast it will be available for reuse / modification&lt;/li&gt;
&lt;li&gt;how efficient / dynamic will onboarding / transfer of people within the team work&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In OpenSource world quality and comprehensiveness of documentation is a matter of project survival. With all other things (code quality, functionality, community size etc) comparable or equal, the project that
makes it easier to understand the code, has more examples and helps make the learning curve less steep, will have better adoption rate and much greater chance to attract the contributors and users. In the end, this will decide whether the project will live and prosper or gets abandoned.&lt;/p&gt;
&lt;p&gt;There is another aspect. While documenting a system: we give it another look and create an &amp;ldquo;internal checkpoint&amp;rdquo; that helps to answer questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is it really complete ?&lt;/li&gt;
&lt;li&gt;What is missing ?&lt;/li&gt;
&lt;li&gt;Are edge cases covered ?&lt;/li&gt;
&lt;li&gt;Does it do what it should do ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This can have a great impact on the development of a project and should be an ongoing process, not left for “afterwards” when the coding is done.&lt;/p&gt;
&lt;p&gt;Writing documentation is explaining the code to unknown audience. One can consider it an instance of a “Rubber Duck debugging” session without any particular problem on the table. It is very useful exercises and quite often it makes visible overlooked scenarios and generally improves quality of code by the simple process of giving it another look from a different angle, wearing a different hat than coders do.&lt;/p&gt;
&lt;h2 id=&#34;what-makes-a-documentation-good-andor-useful&#34;&gt;What makes a documentation good and/or useful&lt;/h2&gt;
&lt;p&gt;The criteria for good documentation we aim for is a documentation that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is up-to date&lt;/li&gt;
&lt;li&gt;is accessible to the proper audience (all project stakeholders)&lt;/li&gt;
&lt;li&gt;is it easy to extend / modify&lt;/li&gt;
&lt;li&gt;has its lifecycle defined and tied to project lifecycle&lt;/li&gt;
&lt;li&gt;is it easy to find: has high degree of re-findability&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;code-vs-documentation-what-we-document&#34;&gt;Code vs Documentation: what we document&lt;/h2&gt;
&lt;p&gt;Documentation contains parts with different degrees of closeness to a project code.&lt;/p&gt;
&lt;p&gt;At the closest end, there is documentation that lives inside the source code files. This type of documentation is
focusing on details such as explaining purpose and functionality of functions, parameters, explanation of the details. It is crucial in the &amp;ldquo;forensic&amp;rdquo; / maintenance situation - debugging the code and searching for an answer to the question &amp;ldquo;why does this not work&amp;rdquo; ?&lt;/p&gt;
&lt;p&gt;While this type of documentation is extremely useful and important, we cannot limit our focus at this level. The problem here is that at this level of detail the documentation is rather hard to read: it is not clear where to start, where to go next - it does not tell a story and it&amp;rsquo;s structure is dictated by physical code structure.&lt;/p&gt;
&lt;p&gt;This is where additional, higher level description comes into play: system description, explanation how does the subsystem / whole system work, what is a module architecture, what are interfaces between modules, subsystems.&lt;/p&gt;
&lt;p&gt;This type of documentation covers information outside of scope of a single source file, but is still source code related. It includes examples of APIs, examples of proper use of the code. It should represent a logical view, that is different from the code structure.&lt;/p&gt;
&lt;p&gt;At the highest level of abstraction from the code we have documentation of architecture and project design, user documentation, installation and project lifecycle documentation.&lt;/p&gt;
&lt;p&gt;All this type of documentation needs to be represented / written in some form and exist is some place. Quite often, the different levels of documentation can be found in different places using different tools. I am trying to show why this is not the best approach and present tools and workflows that allow documentation and code coexit in the same place.&lt;/p&gt;
&lt;h2 id=&#34;where-does-your-documentation-live&#34;&gt;Where does your documentation live&lt;/h2&gt;
&lt;p&gt;There are two places where documentation can live:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in the same source code repository as the code&lt;/li&gt;
&lt;li&gt;somewhere else&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are several advantages of using the same repository as the source code:&lt;/p&gt;
&lt;p&gt;First, it is the audience - big part of the documentation is written by (current) developers for (future) developers. This way it can be managed together, using code version friendly tools. In order to do that, we need to use code version friendly formats - text based formats.&lt;/p&gt;
&lt;p&gt;Second - using the same repository synchronizes release cycles of the documentation. It is much easier to update the CHANGELOG.md when it is right there and to make it part of the next commit than to remember to go to some Wiki and do it there. How many similar lines as the following one have you seen during your career ?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;... SOME CODE

# TODO: Update the Release Notes in the Wiki - URL

... more code

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which gets us to second location for the documentation: somewhere else - meaning &amp;ldquo;separate from the code&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Elsewhere can include places like &amp;ldquo;in a Wiki&amp;rdquo; - which is not great to really unhappy places such as Word documents on a file share.&lt;/p&gt;
&lt;p&gt;There are many issues with this approach: by going elsewhere for the documentation, we need to use separate credentials, loose the direct link to code. Some part of documentation (source code comments) still stays with the source, but other parts - the higher level - are now elsewhere. The &amp;ldquo;one source of truth&amp;rdquo; is lost and often documentation in Wiki contains different information than the actual code.&lt;/p&gt;
&lt;p&gt;With &amp;ldquo;elsewhere&amp;rdquo; we get inherently different release cycles for project code and documentation: updating the documentation is decoupled from code changes and project releases which impacts the &amp;ldquo;up-to-dateness&amp;rdquo; of the information. It also makes the automation and CI/CD much more complicated.&lt;/p&gt;
&lt;p&gt;We also get different search scopes: to find something, two searches are necessary - one over the source code and one over the documentation place.&lt;/p&gt;
&lt;p&gt;As the information related to code lives in two places, we will not have a single source of truth: if there is an overlap and the one place does not agree with the other, there is a risk of using the wrong one. Transfer of information between two locations leads to unnecessary work.&lt;/p&gt;
&lt;p&gt;Note: with all the issues mentioned above, Wiki at least has a built-in mechanism of versioning and diff capability with change tracking and prevention of information loss / overwriting. A much worse situation is using separate word documents on file share - the binary format makes content comparison more complicated and file share is susceptible to overwrite / information loss.
Where Wiki falls short is that it is &amp;ldquo;single threaded&amp;rdquo; - there is a single sequence of changes (albeit made by different contributors). In the code world, the typical situation is that we have multiple active branches representing (at minimum) current - deployed application, bug-fix branch (small changes with short release cycle) and future&lt;/p&gt;
&lt;p&gt;With all that said, we can ask what is the main motivation of using the Wiki as a separate documentation store ? It is usually easy to edit (web interface with some form of WYSIWYG) and formatting capabilities of the Wiki compared to plain text inside the source code repository (headers, bullet points, tables, embedded pictures, links etc). An idea of accessing text based file in a Git repository and the developer&amp;rsquo;s prefered tool chain (that is command line oriented and quite technical) may seem at a first glance to be to complicated for non-developer members of the team: project managers, business analysts, product managers / stake owners.&lt;/p&gt;
&lt;p&gt;In the next part we will show that if a proper format for a documentation file is selected, we can address both of these concerns without leaving the realm of the single source code repository. Let&amp;rsquo;s have a look at available documentation formats from a maintainability point of view and see how these can impact the user experience for content contributors.&lt;/p&gt;
&lt;h2 id=&#34;formats---from-maintainability-pov&#34;&gt;Formats - from maintainability POV&lt;/h2&gt;
&lt;p&gt;What makes document format &amp;ldquo;good&amp;rdquo; from maintainability perspective is that it must be simple and text based.&lt;/p&gt;
&lt;p&gt;Similar to source code files.&lt;/p&gt;
&lt;p&gt;This allows easy diff creation and versioning and most importantly, easy merging when different versions of code (and documentation) are being worked on in parallel.&lt;/p&gt;
&lt;p&gt;Unfortunately, pure text is not visually appealing and lacks lots of features such as a standard way to embed images and structure parts of text (such as heading). There is a text based format that has all these features and more but it is very impractical for manual editing - the HTML.&lt;/p&gt;
&lt;p&gt;The middle ground between plain text and full presentation capable HTML is markup - a standard of formatting plain text file so that it can be easily transformed into HTML representation. Even better, all major source control platforms - Github, Bitbucket and Gitlab - support rendering the markdown files as nicely formatted HTML with headers, links, tables and embedded pictures while allowing editing the source form of the file in the browser. The word &amp;ldquo;markup&amp;rdquo; indicates how it works: there are special, designated characters or words that indicates the formatting or structure of a piece of text - e.g. indicating header, table or embedded image - it marks it up for presentation.&lt;/p&gt;
&lt;p&gt;The result is good looking, easy to version and easy to edit documentation files.&lt;/p&gt;
&lt;p&gt;Considerably worse choice from maintainability point of view are binary proprietary formats - e.g. most famous one would be Word. They are either binary (doc), but even if not, the internal XML based format is not suitable for neither comparing nor editing without proprietary tools. Using the open source alternatives does not help - they pose the same problem and the fact that one does not have a commercial license to use them does not help either.&lt;/p&gt;
&lt;p&gt;Absolutely worst format from maintainability point of view are systems storing the documentation in a database, which essentially turns a document into a proprietary blob and then hides it inside a much bigger proprietary blog, accessible only through a dedicated proprietary interface.&lt;/p&gt;
&lt;p&gt;So the best bet is selecting a markup format that is simple enough to be easy to learn for non-technical users, expressive enough to produce great looking rendered documentation and with tool support allowing in-place editing on Github/Bitbucket, tools for advanced user as well as support for automation of documentation rendering.
The rendering does not necessarily need to be only HTML - many markup toolchains can produce PDF or ebook format such as ePub. These will be the criteria we will use to select best markup format for our use case&lt;/p&gt;
&lt;h2 id=&#34;markup-formats-parade&#34;&gt;Markup formats parade&lt;/h2&gt;
&lt;p&gt;At the end of 2020, we can safely say that the big 3 worth looking at are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Markdown&lt;/li&gt;
&lt;li&gt;AsciiDoc&lt;/li&gt;
&lt;li&gt;RestructuredText&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;with LaTex as honorable mention.&lt;/p&gt;
&lt;p&gt;We were quite considering it seriously because even if technically it is a markup, but it&amp;rsquo;s capabilities and complexity is in a different league. It shines for creating scientific articles with complex mathematical formulas and beautiful exact typography and the whole toolchain is targeting a very different audience and use cases.&lt;/p&gt;
&lt;p&gt;Here are few examples that can be a small peek into how powerful (and complex) LaTex markup is:&lt;/p&gt;
&lt;p&gt;Side-by-side source/rendered:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/markup/latex.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;A snippet of the source
&lt;img src=&#34;https://blog.pivotree.cloud/img/markup/latex2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;.. that renders this result
&lt;img src=&#34;https://blog.pivotree.cloud/img/markup/latex3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;markdown&#34;&gt;Markdown&lt;/h3&gt;
&lt;p&gt;Markdown is by far the most popular markup format in use. It is also the simplest / easiest to use from the big 3.
It has widest tooling support - most IDEs and major editors support preview mode (e.g. Visual Studio Code, PyCharm, Atom) - either OOTB or via plugins. Not surprisingly, there are lots of generators that take one or more markdown files and produce good looking web pages or web sites. It is well supported by CI/CD pipelines and most use cases is focused on producing HTML output&lt;/p&gt;
&lt;p&gt;Among disadvantages of Markdown is lack of standardization - there are dialects and supported features in different toolchains may differ. One of the dialects seems to be approaching &amp;lsquo;standard&amp;rsquo; status - GFM also known as Github Flavored Markdown, which together with &amp;lsquo;Material theme&amp;rsquo; enjoys great popularity among users.
The second disadvantage is being less expressive / less powerful than the others - a consequence of being simpler&lt;/p&gt;
&lt;p&gt;Few pointers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://markdown-it.github.io/&#34;&gt;https://markdown-it.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.markdownguide.org/cheat-sheet/&#34;&gt;https://www.markdownguide.org/cheat-sheet/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt;https://guides.github.com/features/mastering-markdown/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;asciidoc&#34;&gt;AsciiDoc&lt;/h3&gt;
&lt;p&gt;AsciiDoc (&lt;a href=&#34;https://asciidoc.org/&#34;&gt;https://asciidoc.org/&lt;/a&gt;) is format used by toolchains that many book authors use to author and produce eBooks and printed - OReilly among the most notable ones see (documentation on Atlas)[https://docs.atlas.oreilly.com/writing_in_asciidoc.html]. AsciiDoc has many features well suited for larger projects - e.g. support for glossaries, which is no surprise as it started as a markup lightweight alternative to DocBook - XML based format for book authoring.&lt;/p&gt;
&lt;p&gt;The best known tool for AsciiDoc is AsciiDoctor - check its functionality and some more details on differences between AsciiDoc and Markdown  &lt;a href=&#34;https://asciidoctor.org/docs/asciidoc-vs-markdown/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;http://work.haufegroup.io/documentation-as-code/&#34;&gt;and here&lt;/a&gt;. The second link shows few of the &amp;ldquo;killer features&amp;rdquo; of AsciiDoc for code documentation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g. annotation of the code snippet rendered as numbered callouts:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/markup/asciidoc-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;or treatment of the tables:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/markup/asciidoc-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;restructuredtext&#34;&gt;RestructuredText&lt;/h3&gt;
&lt;p&gt;The last of the big three is coming from and is focused on Python and programming languages documentation. It has excellent capabilities to combine documentation extracted from source files - (in Python world &amp;ldquo;docstrings&amp;rdquo;) with the text only files into a coherent, larger body of information. It was originally created as the format for Docutils documents and it&amp;rsquo;s initial release dates back to 2002 - so it is older than Markdown.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s superpowers are in the area of inweaving the code and the text, with extracts from the source files. It is very easy to include partial content of the source code directly into the text, create a table of content or well defined extensibility. It&amp;rsquo;s &amp;ldquo;native&amp;rdquo; toolchain is called &lt;a href=&#34;https://www.sphinx-doc.org/&#34;&gt;Sphinx&lt;/a&gt; and it&amp;rsquo;s showcase is &lt;a href=&#34;https://readthedocs.org/&#34;&gt;ReadTheDocs&lt;/a&gt; - documentation hosting site based on Sphinx but also supports Markdown. Another good example of RestructuredText capabilities is &lt;a href=&#34;https://docs.anaconda.com/restructuredtext/detailed/&#34;&gt;anaconda documentation&lt;/a&gt; or &lt;a href=&#34;https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html&#34;&gt;sphinx documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Restructured text is more complex and unfortunately more fragile than the previous two formats. It is quite easy to write invalid markup and I have personally run several times into weird formatting issues (unlike with Markdown or AsciiDoc). After using it for over 1 years for personal projects I gave up and switched to Markdown - and &lt;a href=&#34;https://jaceklaskowski.medium.com/giving-up-on-read-the-docs-restructuredtext-and-sphinx-674961804641&#34;&gt;I was not alone&lt;/a&gt; that ended up doing so.&lt;/p&gt;
&lt;p&gt;It is also least popular and mostly unknown outside of the Python community.&lt;/p&gt;
&lt;p&gt;Here is &lt;a href=&#34;https://hyperpolyglot.org/lightweight-markup&#34;&gt;side by side comparison&lt;/a&gt; of the syntax similarities and differences between these formats.&lt;/p&gt;
&lt;h3 id=&#34;-and-the-winner-is&#34;&gt;&amp;hellip; and the winner is:&lt;/h3&gt;
&lt;p&gt;Markdown. The ease of use, simplicity, wide toolchain support and being the &amp;ldquo;native&amp;rdquo; markup for all three Git hosting sites (which we all use for different sides of the business).&lt;/p&gt;
&lt;p&gt;As for toolchain, we have selected two options: MkDocs with Material Theme and Gatsby.&lt;/p&gt;
&lt;h2 id=&#34;authoring---as-easy-as-wiki&#34;&gt;Authoring - as easy as Wiki&lt;/h2&gt;
&lt;p&gt;The way you write the documentation using Markdown, depends on what kind of role you play in the projects. For developers, the great news is that you keep using whatever tools you are happy with: any major editor (Visual Studio Code, Atom, Sublime Text, vim, emacs, Notepad++ - etc) supoort Markdown, in many cases including the preview functionality - either directly of through plugins. The documentation is simply a set of files living under the &lt;code&gt;./docs&lt;/code&gt; folder in your repository.&lt;/p&gt;
&lt;p&gt;If you are not a developer and do not really know all the details regarding git, cloning, branches and pull requests, no worries: there is a Wiki-like way to contribute and document everything.&lt;/p&gt;
&lt;p&gt;First get access to the repository on Github, Bitbucket or Gitlab - whatever your project uses. Then simply find the file in the repository and open it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/markup/web1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;You will notice that it renders as a nice formatted web page (this is the preview mode).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/markup/web2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;In order to change the file, you need to switch to Edit mode.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/markup/web3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The browser now offers you a &amp;ldquo;source&amp;rdquo; version of the file in Markdown.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/markup/web4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Make the changes you want and save the changes by making commit. There are two ways to save: either by simply adding the new version of the file to the repository history or by creating a &lt;code&gt;pull request&lt;/code&gt; - a separate area where you change will be kept, allowing somebody to review it and merge it with the rest of the changes other developers may be doing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/markup/web5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you are new to this, here are some pointers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/source-code-management&#34;&gt;https://www.atlassian.com/git/tutorials/source-code-management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/blog/edit-your-code-in-the-cloud-with-bitbucket&#34;&gt;https://bitbucket.org/blog/edit-your-code-in-the-cloud-with-bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/about-pull-requests&#34;&gt;https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/about-pull-requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.gitlab.com/ee/topics/gitlab_flow.html&#34;&gt;https://docs.gitlab.com/ee/topics/gitlab_flow.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;em&gt;main&lt;/em&gt; point here is that from a content creator experience point of view, this gives you very similar tools as Wiki without disadvantage of working on a separate system, away from development workflow. Your documentation will become an integral part of the development flow and will not drift or diverge because the documentation writers are separated from the codebase and unaware of the latest changes.&lt;/p&gt;
&lt;h2 id=&#34;organization-of-the-doc-and-code-mkdocs&#34;&gt;Organization of the Doc and Code: MkDocs&lt;/h2&gt;
&lt;p&gt;The above flows - Web based or developer oriented - were addressing the process of working with a single file. Most project will have many documentation files. They are useful on their own, but there is a simple way to define a navigational menu and turn them to dynamically generated web site with left side navigation bar and right-side file structure preview. This is what &lt;a href=&#34;&#34;&gt;MkDocs&lt;/a&gt; does for us.&lt;/p&gt;
&lt;p&gt;To make repository work with MkDocs, two things are necessary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;put the Markdown files under &lt;code&gt;./docs&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;add file &lt;code&gt;mkdocs.yml&lt;/code&gt; to the root of the project that defines configuration of the documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is an example of a config file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;site_name: Reference Architecture for $PRODUCTNAME
repo_url: https://bitbucket.org/pivotree/$PRODUCTNAME-ref-arch/src/master/
repo_name: $PRODUCTNAME-ref-arch
site_description: $PRODUCTNAME Reference Architecture - Infrastructure Documentation
site_author: miro.adamy@pivotree.com
copyright: (c) 2020 Pivotree - https://pivotree.com/

nav:
    - Home: index.md
    - Environments:
        - Staging: STAG.md
        - Production: PROD.md
        - Dev/QA: DEV.md
    - Modules:
        - Module 1: module-demo-1.md
        - Module 2: module-demo-2.md
    - Examples:
        - Minimal: example-minimal.md
        - Typical: example-typical.md
        - Everything: example-everything.md
    - About this Documentation:
        - Intro to MkDocs: mkdocs/about.md
        - Markdown Demo: mkdocs/markdown-demo.md
        - Macros Demo: mkdocs/macros-demo1.md
#        - Diagrams: plantuml/diagrams.md
theme:
    name: material

markdown_extensions:
    - admonition
    - codehilite
    - footnotes
    - meta
    - toc:
        permalink: True
    - sane_lists
    - pymdownx.arithmatex
    - pymdownx.emoji:
        emoji_index: !!python/name:materialx.emoji.twemoji
        emoji_generator: !!python/name:materialx.emoji.to_svg
    - pymdownx.superfences
    - pymdownx.tasklist:
        custom_checkbox: true
    - pymdownx.tabbed
    - pymdownx.tilde
    - pymdownx.magiclink
    - pymdownx.details


plugins:
    - search
    - macros:
        include_dir: .

extra:
    price: 12.50
    company:
        name: Pivotree
        address: March 450
        website: https://pivotree.com/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It contains 5 parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;header - name of the site&lt;/li&gt;
&lt;li&gt;navigational structure - which files create site and how&lt;/li&gt;
&lt;li&gt;theme&lt;/li&gt;
&lt;li&gt;markdown extensions&lt;/li&gt;
&lt;li&gt;plugins (note the include_dir directive)&lt;/li&gt;
&lt;li&gt;extra data (can be used in parameters)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the source code organization:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/markup/struct1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;navigation-src--rendered&#34;&gt;Navigation: SRC =&amp;gt; Rendered&lt;/h3&gt;
&lt;p&gt;The generated site takes the navigation part of &lt;code&gt;mkdocs.yml&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/markup/struct2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;and renders a dynamic menu out of it.&lt;/p&gt;
&lt;p&gt;The whole layout of the site is defined by the navigation and the used theme. It is &lt;a href=&#34;https://squidfunk.github.io/mkdocs-material/&#34;&gt;material theme&lt;/a&gt; for MkDocs that works in the background and renders the 3-column view with navigation on the left, content in the middle and structure of currently displayed document in the right column&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/markup/struct4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;documentation-generation-and-hosting&#34;&gt;Documentation Generation and Hosting&lt;/h2&gt;
&lt;p&gt;The process of transformation of the Markdown files to a website can be fully automated using CI/CD pipelines in each of the major hosting sites. The best support (IMHO) has Gitlab where this is an OOTB feature:&lt;/p&gt;
&lt;p&gt;This is .gitlab-ci.yml that generates HTML sites accessible as Gitlab Pages attached to the repository. The great advantage of Gitlab is support for private Gitlab pages for private repositories, which simplify setup for authentication / authorization.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;image: python:3.8-buster

before_script:
  - pip install mkdocs &#39;mkdocs-minify-plugin&amp;gt;=0.2&#39; 
  - pip install &#39;mkdocs-git-revision-date-localized-plugin&amp;gt;=0.4&#39; &#39;mkdocs-awesome-pages-plugin&amp;gt;=2.2.1&#39; &#39;mkdocs-macros-plugin&#39;

  # Add your custom theme if not inside a theme_dir
  # (https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes)
  # - pip install mkdocs-material

pages:
  script:
  - mkdocs build
  - mv site public
  artifacts:
    paths:
    - public
  only:
  - master

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Similar setup works for Github by generating the website into a second, dedicated &amp;ldquo;published&amp;rdquo; Github pages repository. Unlike in the Gitlab case, all Github pages are public. For more information, refer to &lt;a href=&#34;https://www.mkdocs.org/user-guide/deploying-your-docs/&#34;&gt;this&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another option is dedicated hosting site for MkDocs documentatio &lt;a href=&#34;https://docs.readthedocs.io/en/stable/intro/getting-started-with-mkdocs.html&#34;&gt;ReadTheDocs&lt;/a&gt; which also supports Sphinx and RestructuredText&lt;/p&gt;
&lt;p&gt;And of course, there is always an option to use mkdocs build and copy the generated static site from &lt;code&gt;./public&lt;/code&gt; site to the hosting provider - e.g. an S3 bucket.&lt;/p&gt;
&lt;h2 id=&#34;single-vs-multi-repository-projects&#34;&gt;Single vs Multi-repository projects&lt;/h2&gt;
&lt;p&gt;In cloud native projects, it is very rare nowadays that all project code is stored in a single repository. With microservices, serverless, infrastructure as a code, GitOps etc we usually end up with quite a few different repositories. We can use the techniques above for documenting everything related to one repository - e.g. one microservice - but when it comes to documentation involving multiple components, we have a similar issue as with source code file vs documentation files: we have to put this doc files outside of the component repositories.&lt;/p&gt;
&lt;p&gt;Each of the repositories internally uses it&amp;rsquo;s MkDocs structure and has its own &lt;code&gt;mkdocs.yml&lt;/code&gt; file. For the documentation that does not belong to any particular component, we create another MkDocs repository that plays three roles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;holds all documentation for all inter-modular parts&lt;/li&gt;
&lt;li&gt;holds main navigational tree and links to submodule specific navigation&lt;/li&gt;
&lt;li&gt;checks out all component modules as git submodules&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a proof of concept, we use this technique for documentation of the DIVE2 machine learning platform.&lt;/p&gt;
&lt;p&gt;Here is the &amp;ldquo;top level&amp;rdquo; repository:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;➜  tree -L 2
.
└── dive-documentation
    ├── CHANGELOG.md
    ├── README.md
    ├── dive-data-manager
    ├── dive-data-manager-api
    ├── dive-data-schema-svc
    ├── dive-infra
    ├── dive-job-manager
    ├── dive-model-manager
    ├── dive-prg-control-svc
    ├── dive-sgm-control-svc
    ├── dive-sgm-lib
    ├── dive-sgm-svc-template
    ├── dive-sls-batch
    ├── dive-user-mgmt
    ├── docs
    ├── document_server.sh
    ├── local-links.md
    ├── mkdocs.yml
    ├── pvt-python-commons
    ├── pvt-python-rest
    ├── pvt-sgm-color-norm-svc
    └── tr-sgm-duplicates-svc

18 directories, 5 files
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and here is the subset of the &lt;code&gt;mkdocs.yml&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;site_name: DIVE2 joint Documentation
repo_url: https://bitbucket.org/pivotree_h3/dive-documentation/src/master/
repo_name: dive-documentation
site_description: DIVE2  Documentation
site_author: miro.adamy@pivotree.com
copyright: (c) 2020 Pivotree - https://pivotree.com/

nav:
    - Home: index.md
    - Infra: dive-infra.md
    - Data:
        Manager: data-manager.md
        Manager API: data-manager-api.md
        Schema: data-schema-svc.md
    - Job Manager: job-manager.md
    - Model Manager: model-manager.md
    - User Management: user-mgmt.md
    - Prg control: prg-control-svc.md
    - Sagemaker:
        - Sagemaker Control: sgm-control-svc.md
        - Sagemaker Lib: sgm-lib.md
        - Service Template: sgm-svc-template.md
        - Duplicates Svc: tr-sgm-duplicates-svc.md
        - Color Normalization: pvt-sgm-color-norm-svc.md
    - Batch: sls-batch.md
    - Libs:
        pvt-python-commons: pvt-python-commons.md
        pvt-python-rest: pvt-python-rest.md


theme:
    name: material

markdown_extensions:

... DELETED ...


plugins:
    - search
    - macros:
        include_dir: .

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The rendered website reaches into the submodules and displays information from services in one consistent unit, combined with additional information about architecture, module relations ect. All this without duplication or requirements for the service team to work outside of their area of focus.&lt;/p&gt;
&lt;p&gt;The mechanics is quite simple. The main menu - nav structure - refers to the files representing the submodule entry points. These files are located in the &lt;code&gt;docs&lt;/code&gt; directory of the &amp;ldquo;roof&amp;rdquo; repository.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;➜  dive-documentation git:(master) tree docs
docs
├── data-manager-api.md
├── data-manager.md
├── data-schema-svc.md
├── dive-infra.md
├── index.md
├── job-manager.md
├── model-manager.md
├── prg-control-svc.md
├── pvt-python-commons.md
├── pvt-python-rest.md
├── pvt-sgm-color-norm-svc.md
├── sgm-control-svc.md
├── sgm-lib.md
├── sgm-svc-template.md
├── sls-batch.md
├── tr-sgm-duplicates-svc.md
└── user-mgmt.md

0 directories, 17 files
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;How are these files hierarchically arranged is decided in the &lt;code&gt;nav&lt;/code&gt; part of the YML file:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/markup/multi1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Each of this file contains one or more include directives, which are operating from the top directory of the repository and have therefore access to any submodule markdown files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;➜  dive-documentation git:(master) cat docs/model-manager.md
{% include &#39;dive-model-manager/README.md&#39; %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If the structure of the submodule is more complex, the &amp;ldquo;module file&amp;rdquo; can contain more directives or links.&lt;/p&gt;
&lt;p&gt;When all this is put together, we get a combined, unified view of the system documentation with all submodules included. It is fully in the hands of the services team what the service documentation looks like and it is fully in the hands of the documentation repository maintainer which of those will be published and where in the navigation tree.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/markup/multi5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;other-tools&#34;&gt;Other tools:&lt;/h2&gt;
&lt;p&gt;During last couple of months, we have looked at and used several other systems related to documentation generation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Antora - Asciidoc based, multi-repo system&lt;/li&gt;
&lt;li&gt;Hugo - Go template based Markdown generator&lt;/li&gt;
&lt;li&gt;Jekyll / Hyde - another generator, Ruby based&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;but this post is getting way too long, so I will get back to some of them in the future.&lt;/p&gt;
&lt;p&gt;There is certainly no shortage of available generators and solution - check the &lt;a href=&#34;https://jamstack.org/generators/&#34;&gt;dedicated site&lt;/a&gt;. My colleague will continue with detailed case study on one of them in &lt;a href=&#34;https://blog.pivotree.cloud/2020-11-24-documentation-gatsby/&#34;&gt;this blogpost&lt;/a&gt;&lt;/p&gt;
</description>
		</item>
		
		<item>
			<title>Reference Architecture as a Code</title>
			<link>https://blog.pivotree.cloud/2020-08-07-architecture-as-a-code/</link>
			<pubDate>Mon, 10 Aug 2020 13:00:00 &#43;0800</pubDate>
			<author>Pivotree Team</author>
			<guid>https://blog.pivotree.cloud/2020-08-07-architecture-as-a-code/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pivotree.cloud/img/unsplash-photos-5mZ_M06Fc9g.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description>&lt;h2 id=&#34;many-shapes-of-architecture&#34;&gt;Many shapes of Architecture&lt;/h2&gt;
&lt;p&gt;According to the &lt;a href=&#34;https://martinfowler.com/architecture/&#34;&gt;wise people&lt;/a&gt;, an architecture is the shared understanding that the expert developers/system builders/maintainers have of the system design. It&amp;rsquo;s purpose is to maximize the
probability that the decisions you have to make early in a project are the right ones. It is sort of a blueprint for the future system and captures parts, relations, boundaries, constraints.&lt;/p&gt;
&lt;p&gt;In our business (we build and run environments and solutions for eCommerce, data management and other business activities of our customers), an important subtype of architecture is Reference Architecture. It is an architecture that serves both as a capture of best practices for a particular business case as well as a living, evolving template for creating new instances of that type of an environment. Both best practice as well as evolving features are important: the reference architecture (RA) serves as knowledge gathering in the ever changing world of cloud. As new features of AWS or Azure come, the RA needs to absorb them to incorporate latest advances and to use the best price / performance options available.&lt;/p&gt;
&lt;p&gt;Architecture can take many physical forms. Traditionally, back in the waterfall age, it used to be a long Word document, a collection of Visio drawings or combination of both. Eventually Word was replaced by Google Docs and/or Confluence, but the same idea stayed: the prose written for humans that use manual processes to transform the prose to instances of a system, usually using cloud management console or some other tool.
With the arrival of Cloudformation and Terraform, the manual process got scripted which helped repeatability during the environment creation phase, but it also introduced a new challenge: a gap between code living in version control and documentation living in a Wiki. These two separate representations of the same idea were stored in different places, requiring different tools and different credentials - despite being managed and worked on by the same people. As a natural consequence, the documentation often got out of sync with the code and instead of making understanding better and explaining / documenting, it added confusion and stopped being useful.&lt;/p&gt;
&lt;p&gt;Some people say the special dedicated tools that hold both are the answer. Such a tool would provide a single place to hold all the information, allow creating diagrams, add documentation and maintain or generate the code. I am a bit sceptical when it comes to these kinds of solutions. I have seen good partial solution in the past (e.g. Enterprise Architect) that were delivering value, but they were limited to subset of languages and notations - e.g. UML diagrams
and Java/C++ or object oriented languages. I am not aware of any tool I would consider full scale replacement for good documentation plus code. Some are promising - e.g. &lt;a href=&#34;https://medium.com/faun/modules-tf-convert-visual-aws-diagram-into-terraform-configurations-e61fb0574b10&#34;&gt;Cloudcraft plugin from Anton Babenko&lt;/a&gt;. I imagine this can be an excellent option for a startup or small company, but does not allow us enough flexibility to fit within existing tools and backend systems we have.&lt;/p&gt;
&lt;p&gt;Rest of this blog entry will describe one possible way we are trying to overcome the documentation / code gap by using open standards, opensource tools and adhering to &lt;a href=&#34;https://www.writethedocs.org/guide/docs-as-code/&#34;&gt;documentation as a code&lt;/a&gt; philosophy.&lt;/p&gt;
&lt;p&gt;As a result, we define Reference Architecture as code artifact - repository that contains both executable description (Terraform Code) as well as all the documentation explaining decisions, options and alternatives using best practices such as &lt;a href=&#34;https://aws.amazon.com/architecture/well-architected/&#34;&gt;WAF&lt;/a&gt;, adapted to company and customers special needs - e.g. enforcing / standardising naming, tagging, policies and in general capturing knowledge about the system built.&lt;/p&gt;
&lt;h2 id=&#34;selecting-the-format&#34;&gt;Selecting the format&lt;/h2&gt;
&lt;p&gt;The documentation format should satisfy these requirements&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;must be file oriented (not living in database) =&amp;gt; it can goes with terraform code to same repo&lt;/li&gt;
&lt;li&gt;must be Git friendly = allow good versioning and comparison&lt;/li&gt;
&lt;li&gt;must be easy to work with for developers&lt;/li&gt;
&lt;li&gt;must be expressive enough to allow formatting for pleasant Web reading experience (unlike e.g. man or pod)&lt;/li&gt;
&lt;li&gt;must allow easy way to generate documentation for set of interconnected pages&lt;/li&gt;
&lt;li&gt;must be open, well supported with good ecosystem for tools and automation&lt;/li&gt;
&lt;li&gt;must be CI/CD friendly (using pipelines in Bitbucket/GitHub/Gitlab)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have ended up with a shortlist of three main contenders:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MarkDown with MkDocs / Material Theme&lt;/li&gt;
&lt;li&gt;AsciiDoc&lt;/li&gt;
&lt;li&gt;RestructuredText with Sphinx&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After evaluating each (details of this evaluation will be published in a separate post) we ended up selecting the MarkDown.&lt;/p&gt;
&lt;p&gt;The main three reasons why we ended up selecting MarkDown were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;familiarity - Markdown is best known format, zero learning curve&lt;/li&gt;
&lt;li&gt;MkDocs is Python based and with Material Theme competes very well with Sphinx generated sites&lt;/li&gt;
&lt;li&gt;extensibility - using Macros module allowed to solve the file include problem&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference-architecture-with-markdown-and-mkdocs&#34;&gt;Reference Architecture with Markdown and MkDocs&lt;/h2&gt;
&lt;p&gt;To add the documentation-as-a-code to the Terraform repo (the actual code), there is very little to do.
Absolute necessary are only two files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;./mkdocs.yml&lt;/code&gt; - defines the structure of the navigation and MkDocs configuration&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./docs/index.md&lt;/code&gt; - default directory and one Markdown file (the name can me different than index.md)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is usually a good idea to add &lt;code&gt;requirements.txt&lt;/code&gt; file for those users who prefer to install MkDocs locally and a shell script
that runs MkDocs in Docker to the root:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run --rm -it -p 8000:8000 -v &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pwd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;:/docs miroadamy/mkdocs-material $@
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdocs
mkdocs-material
mkdocs-minify-plugin&amp;gt;=0.2
mkdocs-git-revision-date-localized-plugin&amp;gt;=0.4
mkdocs-awesome-pages-plugin&amp;gt;=2.2.1
mkdocs-macros-plugin
diagrams
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The last dependency is optional - only if you plan to use a Python based diagramming tool later on.&lt;/p&gt;
&lt;p&gt;The above structure is for the documentation. The Terraform code lives in folders that are dedicated to environments
or variants of environments. The general structure of the Terraform code is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./ - PROD = named environment
   - UAT  = named environment
   - UAT-HA = named variant
   - DEVQA = named environment
   - modules/
        - database/ - local module for RDS provisioning
        - vpn/      - local module 
   - examples/
        - minimal/ = example of a minimal environment
        - everything = the HA top environment example
        - typical/ = example of most common use case
        - typical-mysql = example specific to a particular database
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We use three kind of Terraform modules:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* platform library
* community modules
* local RA specific modules
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The most useful are Platform Library modules. These are internal, mostly closed source modules that provide
packaged templates for making sure that environments we build for our customers contain all necessary security a
best practices features from the ground up. For example, proper and consistent tagging of the resources is crucial for
proper monitoring and cost reporting, policies are super important for security, logs processing for integration with
the monitoring tools CloudOps team uses and general structure, default variables and locals to make sure that the account works well inside our AWS organization hierarchy and Pivotree workflow.&lt;/p&gt;
&lt;p&gt;Platform library is maintained by dedicated internal team and while it is pretty comprehensive, it does not cover
everything. We often adapt community modules, add our own extensions / bug fixes / documentation and republish
the fork as opensource back to the community.&lt;/p&gt;
&lt;p&gt;The local RA modules often are &amp;ldquo;second degree modules&amp;rdquo; - the modules that are using other modules. We use them for
making sure there is good balance between consistency among environments and respecting the DRY (don&amp;rsquo;t repeat yourself)
design principle.&lt;/p&gt;
&lt;p&gt;Each of the Terraform folders for environment, module or example can have it&amp;rsquo;s own &lt;code&gt;docs/&lt;/code&gt; subfolder
where the environment/module/example specific information can reside. The main navigation can easily point to these
pages and provide a consistent, global documentation tree.&lt;/p&gt;
&lt;p&gt;The key feature for good user experience is ability to include both Markdown fragments and code files into the compiled
documentation - this is provided by &lt;code&gt;include&lt;/code&gt; macro added in the &lt;code&gt;mkdocs.yml&lt;/code&gt; combined with a &amp;ldquo;proxy&amp;rdquo; markdown files that
have the name of the environment/module or example they represent and simply include the main Markdown file for that environment&lt;/p&gt;
&lt;p&gt;The file for production environment - &lt;code&gt;./docs/PROD.md&lt;/code&gt; (the terraform code for production is in the &lt;code&gt;./PROD/&lt;/code&gt; folder)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% include &#39;PROD/docs/README.md&#39; %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is an example - a starter template how such architecture can look like&lt;/p&gt;
&lt;p&gt;Just the documentation portion:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;➜  aaac-starter-template tree
.
├── CHANGELOG.md
├── DEV
│   └── docs
│       └── README.md
├── PROD
│   └── docs
│       └── README.md
├── README.md
├── UAT
│   └── docs
│       └── README.md
├── docs
│   ├── DEV.md
│   ├── PROD.md
│   ├── UAT.md
│   ├── example-everything.md
│   ├── example-minimal.md
│   ├── example-typical.md
│   ├── index.md
│   ├── mkdocs
│   │   ├── about.md
│   │   ├── macros-demo1.md
│   │   ├── markdown-demo.md
│   │   └── snippet.md
│   ├── module-demo-1.md
│   └── module-demo-2.md
├── document_server.sh
├── examples
│   ├── everything
│   │   └── README.md
│   ├── minimal
│   │   └── README.md
│   └── typical
│       └── README.md
├── mkdocs.yml
├── modules
│   ├── demo-1
│   │   └── docs
│   │       └── README.md
│   └── demo-2
│       └── docs
│           └── README.md
└── requirements.txt

17 directories, 26 files
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is how the navigation in the table of content looks like in the source form:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/aaac/nav-source.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;and the rendered form:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/aaac/nav-rendered.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;terraform-code-organization&#34;&gt;Terraform code organization&lt;/h3&gt;
&lt;p&gt;This topic deserves deeper discussion, but at the high level, Terraform does not care how many files is there in the &amp;ldquo;project&amp;rdquo;
(which must be located in single directory), what are the file names (as long as they have &lt;code&gt;.tf&lt;/code&gt; extension)
or how is the content distributed among them.&lt;/p&gt;
&lt;p&gt;We are using our own adopted version of a naming/content allocation scheme for Terraform files that looks looks like this
(this is an example that uses Platform library and most of the files are &amp;ldquo;clients&amp;rdquo; of some module):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;main.tf - the main functionality&lt;/li&gt;
&lt;li&gt;providers.tf - configuration of the AWS provider (locked version) and others&lt;/li&gt;
&lt;li&gt;version.tf - lock terraform version&lt;/li&gt;
&lt;li&gt;outputs.tf - all output produced&lt;/li&gt;
&lt;li&gt;variables.tf - declaration of all variables without default values&lt;/li&gt;
&lt;li&gt;pivotree-variables.tf - company-specific variables used for integration across sales, app services and ops&lt;/li&gt;
&lt;li&gt;locals.tf - the local definition - mainly for consistent tagging&lt;/li&gt;
&lt;li&gt;init.auto.tfvars - the predefined values of the variables with comments&lt;/li&gt;
&lt;li&gt;security-groups.tf - explicit definition of all used SG&lt;/li&gt;
&lt;li&gt;(optional) AWS-RESOURCE.net - depending on module, additional files for AWS resources (ELB, RDS, EC2 etc)&lt;/li&gt;
&lt;li&gt;docs/README.md or README.md - local documentation for this set of files only&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is an example of the Reference architecture repository with one module, one example and DEV environment containing
the code for Terraform:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── CHANGELOG.md
├── DEV
│   ├── docs
│   │   └── README.md
│   ├── init.auto.tfvars
│   ├── locals.tf
│   ├── main.tf
│   ├── outputs.tf
│   ├── pivotree-variables.tf
│   ├── providers.tf
│   ├── security-groups.tf
│   ├── variables.tf
│   ├── version.tf
│   └── vpc-net.tf
├── PROD
│   └── docs
│       └── README.md
├── README.md
├── UAT
│   └── docs
│       └── README.md
├── docs
│   ├── DEV.md
│   ├── PROD.md
│   ├── UAT.md
│   ├── example-everything.md
│   ├── example-minimal.md
│   ├── example-typical.md
│   ├── index.md
│   ├── mkdocs
│   │   ├── about.md
│   │   ├── macros-demo1.md
│   │   ├── markdown-demo.md
│   │   └── snippet.md
│   ├── module-demo-1.md
│   └── module-demo-2.md
├── document_server.sh
├── examples
│   ├── everything
│   │   └── README.md
│   ├── minimal
│   │   └── README.md
│   └── typical
│       ├── README.md
│       ├── init.auto.tfvars
│       ├── locals.tf
│       ├── main.tf
│       ├── outputs.tf
│       ├── pivotree-variables.tf
│       ├── providers.tf
│       ├── security-groups.tf
│       ├── variables.tf
│       ├── version.tf
│       └── vpc-net.tf
├── mkdocs.yml
├── modules
│   ├── demo-1
│   │   ├── docs
│   │   │   └── README.md
│   │   ├── init.auto.tfvars
│   │   ├── locals.tf
│   │   ├── main.tf
│   │   ├── outputs.tf
│   │   ├── pivotree-variables.tf
│   │   ├── providers.tf
│   │   ├── security-groups.tf
│   │   ├── variables.tf
│   │   ├── version.tf
│   │   └── vpc-net.tf
│   └── demo-2
│       └── docs
│           └── README.md
└── requirements.txt

17 directories, 56 files


&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;repository-layout---or-what-belongs-where&#34;&gt;Repository layout - or what belongs where&lt;/h3&gt;
&lt;p&gt;At this stage, we have quite a few folders or locations, both for the documentation as well as for the Terraform source code,
so the natural question is: what should be placed where.&lt;/p&gt;
&lt;p&gt;There are several ways how to address this, but the most important rule that should be kept in mind is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pick ONE strategy that works for your process/way of thinking&lt;/li&gt;
&lt;li&gt;document it&lt;/li&gt;
&lt;li&gt;stick to it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is what we are currently at:&lt;/p&gt;
&lt;p&gt;First: &lt;code&gt;modules&lt;/code&gt;. This folder is often empty and when it is not empty, it should contain &lt;strong&gt;internal modules&lt;/strong&gt;. These are reusable
ways how to build part of the solution from other modules (public or private) or from resources. These are potential incubators for
the new library modules. It is very important to pay attention to variables and outputs of the module, as these will determine its
usability.&lt;/p&gt;
&lt;p&gt;The documentation of the module should focus on details about variables (module parameters) and module outputs, default
values as well as contain examples of what gets built.&lt;/p&gt;
&lt;p&gt;Next: &lt;code&gt;examples&lt;/code&gt;. This is the core of Architecture as a Code - both on code as well as on documentation side. If there are
variants of the architecture, there should be examples for each. An example is like a build for a non-existing project or a
fictional customer. Examples should have good names and their documentation should describe the use case and decision criteria
when the example is a good solution. At minimum, there should be 3 examples, named &lt;code&gt;minimal&lt;/code&gt;, &lt;code&gt;everything&lt;/code&gt; and &lt;code&gt;typical&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the architecture repository contains internal modules, there should be enough examples for each module.&lt;/p&gt;
&lt;p&gt;Last - the &lt;code&gt;environment&lt;/code&gt; folders - UAT, PROD, DEV - should contain adapted examples of the build for a particular project.
These are (from architecture point of view) transient folders as they will &amp;ldquo;grow and die&amp;rdquo; many times during the architecture lifecycle.&lt;/p&gt;
&lt;h2 id=&#34;reference-architecture-lifecycle&#34;&gt;Reference Architecture Lifecycle&lt;/h2&gt;
&lt;p&gt;The main purpose of reference architecture is to support reuse and consistency between repetitive builds of the environments,
while providing an easier way to extract changes, updates and best practices related to environment/cloud and tools evolution.&lt;/p&gt;
&lt;p&gt;The simplest approach is to start a new build with a detached copy of the latest version of a RA repository. This is very easy and fast
but makes later consolidation harder and usually results in consolidation never happens. At the end, there is set of snowflake
repositories with no easy way to compare them or see their evolution path.&lt;/p&gt;
&lt;p&gt;Better approach is using 2 repositories: a Project repository and an Architecture repo.&lt;/p&gt;
&lt;p&gt;Start with shallow cloning of the Architecture repository using &lt;code&gt;architecture&lt;/code&gt; as origin name:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone --depth=1 --origin architecture ARCHITECTURE_REPO_URL
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then create empty repository for the project in the Bitbucket/Github/Gitlab and add it as remote repository to the architecture clone:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote add origin PROJECT_REPO_URL
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The starting point of the new environments will be the current (&lt;code&gt;develop&lt;/code&gt;) state of the architecture repo. Let&amp;rsquo;s assume the project name
is RA_DEMO.&lt;/p&gt;
&lt;p&gt;We will be working with multiple local branches that will be synchronized with the remote branches in these two repositories:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;develop =&amp;gt; origin/develop - environment definition in progress
master  =&amp;gt; origin/master  - environment release state
RA_DEMO =&amp;gt; architecture/PROJECTS/RA_DEMO
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To set it up:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout master
git push -u origin/master

git checkout -b develop
git merge archirecture/develop
git push -u origin/develop

git checkout -b RA_DEMO
git push -u architecture/PROJECTS/RA_DEMO

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Main work will be happening in the develop branch, pushing the changes to origin/develop.&lt;/p&gt;
&lt;p&gt;This means creating folders for ENV, adding Terraform code and documentation, testing documentation locally,
running the code and adjusting.&lt;/p&gt;
&lt;p&gt;When the environment and documentation reaches tested state, we merge to master and push to project repository, where (eventually)
the CI/DC pipelines will run and deploy the infrastructure.&lt;/p&gt;
&lt;p&gt;Important thing to keep in mind is avoiding reformatting and large content re-arrangement which would complicate the next phase.&lt;/p&gt;
&lt;p&gt;When the environment is ready, we may end up with some changes or additions under &lt;code&gt;./modules&lt;/code&gt; or &lt;code&gt;./examples&lt;/code&gt; that are worthy of keeping as
part of next builds based on this reference architecture. This is where the reintegration step comes into place.&lt;/p&gt;
&lt;h3 id=&#34;reintegration---project-side&#34;&gt;Reintegration - project side&lt;/h3&gt;
&lt;p&gt;The goal of this phase is to make sure that worthy additions and improvements will be kept for the future builds.&lt;/p&gt;
&lt;p&gt;It starts all by switching to &lt;code&gt;RA_DEMO&lt;/code&gt; branch and merging the state we need to integrate:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout RA_DEMO
git merge master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Usually, the details of the build environment are of little interest for the architecture. We can remove the ENV folders, add more
documentation or better details while working on the RA_DEMO branch, producing one or more commits on this branch. All this commit
should be local commits - do NOT push to &lt;code&gt;architecture&lt;/code&gt; yet. Sometimes we may want to consider making a ENV build a new example&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;copy the TF code under &lt;code&gt;./examples&lt;/code&gt;, name it accordingly and update documentation / remove customer specific data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes we discover issues that should be addressed on the architecture level. Adding them to &lt;code&gt;backlog.md&lt;/code&gt; is great way that they will
be available for the maintainer of the RA repo.&lt;/p&gt;
&lt;p&gt;When the state of the architecture is in desired state, we can squeeze the commits to single commit using interactive rebase (see &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History&#34;&gt;this&lt;/a&gt; for more details)&lt;/p&gt;
&lt;p&gt;After rebase, we can push the RA_DEMO to architecture remote:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and create a pull request for Architecture repo, to merge the PROJECT/RA_DEMO to develop.&lt;/p&gt;
&lt;h3 id=&#34;reintegration---architecture-side&#34;&gt;Reintegration - architecture side&lt;/h3&gt;
&lt;p&gt;Second part of the reintegration happens completely in the Architecture repo, often by different person / team.&lt;/p&gt;
&lt;p&gt;Clone the Architecture repo, switch to newly added PROJECT/RA_DEMO branch, review the addition.&lt;/p&gt;
&lt;p&gt;Every change should be tested and independently validated. Ideally the architecture team adds dedicated tests for the new
examples and more documentation, reviews backlog.md for list of issues / improvements suggested and creates tickets based on
this information.&lt;/p&gt;
&lt;p&gt;If everything is OK, increase version of the RA and merge to develop - to make it available for next iteration.&lt;/p&gt;
&lt;p&gt;The starter template of the reference architecture using the above approach is available at &lt;a href=&#34;https://github.com/thinkwrap/aaac-starter-template&#34;&gt;Pivotree Opensource Github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;roi-consideration&#34;&gt;ROI consideration&lt;/h2&gt;
&lt;p&gt;Creation and maintenance of the reference architecture is a non-trivial investment of time and resource. Not always this kind
of effort is warranted. From our experience, here are some decision criteria when considering standardization and using this approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how many environments will be created during the next month / quarter ? RA and AaaC is less useful for small number of builds over longer periods
of time&lt;/li&gt;
&lt;li&gt;what is the platform complexity ? For highly complex platforms with complex dependencies and long implementation cycle, it makes more sense focus on smaller building blocks
rather than on full RA&lt;/li&gt;
&lt;li&gt;what is the speed of change for the platform ? Every major release (and often minor release as well) will require updating and re-testing the RA.
For fast changing environment, this can be too expensive&lt;/li&gt;
&lt;li&gt;what is the customer requirements variability ? If there are huge differences between the builds, the RA will need to contain large number
of examples and variants which will make maintenance and testing more costly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The ideal candidates for the AaaC / RA DevOps cycle are small to medium sized solutions with small number of variants, with
customers requirements being similar enough to fit into 3-4 cases and with large enough number of deployments for a platform
version that allows good test coverage.&lt;/p&gt;
&lt;h2 id=&#34;diagrams-markdown-friendly-way&#34;&gt;Diagrams Markdown Friendly Way&lt;/h2&gt;
&lt;p&gt;The traditional way how to create diagram and add them to the documentation is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use an external tool - either a local one (Omnigraffle, Visio) or an online tool (LucidChart, Draw.IO)&lt;/li&gt;
&lt;li&gt;save source of the diagram somewhere (local drive or cloud)&lt;/li&gt;
&lt;li&gt;export the image rendering of the diagram to some image format (e.g. PNG)&lt;/li&gt;
&lt;li&gt;link the image to your documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While this is easy and convenient way of doing things with very low barrier of entry, there are several disadvantage I&amp;rsquo;d like to point out&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one must have the same version of editing software - on a proper platform if local. The challenges of sharing Omnigrafle source with Windows users (or Visio with Linux users) are non-trivial. For online tools, one must have access / license to the software.&lt;/li&gt;
&lt;li&gt;the native format is not living in the same place as the documentation - unless one uses local tools (which brings platform dependency) and life cycles of the documentation and diagrams are separate. This violates the original intention of keeping lifecycle of code and documentation together, and diagrams are fundamental part of the documentation&lt;/li&gt;
&lt;li&gt;native format is impossible to properly version control. As a consequence of the previous point, there is no easy way to tell differences between various versions of the diagram from the source and image.&lt;/li&gt;
&lt;li&gt;it is very hard to automate the rendering part to get e.g. different resolutions of the images for different media&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;binary-editor-alternatives&#34;&gt;Binary Editor Alternatives&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;d like to showcase / demo two alternatives to visual GUI editors that essentially apply the same idea as Terraform to infrastructure to the process of creating diagrams. Instead of using GUI editor (~ AWS Console) you describe the intended diagram (~ infrastructure) in an open, free Domain Specific Language PlantUML (~ Terraform) and use free, opensource and readily available tools to transform the DSL to target assets - images (~ resources). This is the approach using PlantUML&lt;/p&gt;
&lt;h3 id=&#34;plantuml-diagrams&#34;&gt;PlantUML diagrams&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/PlantUML&#34;&gt;PlantUML&lt;/a&gt; is &lt;a href=&#34;https://plantuml.com/&#34;&gt;well established DSL&lt;/a&gt; with great ecosystem and support. It allows creating wide variety of diagrams and converting them either &lt;a href=&#34;http://www.plantuml.com/plantuml/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000&#34;&gt;online&lt;/a&gt; or in &lt;a href=&#34;https://hub.docker.com/r/plantuml/plantuml-server/&#34;&gt;Docker&lt;/a&gt; or using &lt;a href=&#34;https://plugins.jetbrains.com/plugin/7017-plantuml-integration&#34;&gt;plugin for IDE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is also &lt;a href=&#34;https://plantuml.com/stdlib&#34;&gt;standard library of modules&lt;/a&gt; including AWS and excellent &lt;a href=&#34;https://crashedmind.github.io/PlantUMLHitchhikersGuide/&#34;&gt;guide&lt;/a&gt; with examples and details&lt;/p&gt;
&lt;p&gt;Here is a quick demo of few examples what can be done with PlatUML&lt;/p&gt;
&lt;h3 id=&#34;aws-with-plantuml&#34;&gt;AWS with PlantUML&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml
!include &amp;lt;awslib/AWSCommon&amp;gt;
!include &amp;lt;awslib/AWSSimplified.puml&amp;gt;
!include &amp;lt;awslib/Compute/all.puml&amp;gt;
!include &amp;lt;awslib/mobile/all.puml&amp;gt;
!include &amp;lt;awslib/general/all.puml&amp;gt;
!include &amp;lt;awslib/GroupIcons/all.puml&amp;gt;

 skinparam linetype polyline
&#39; skinparam linetype ortho

package &amp;quot;AWS Cloud&amp;quot; {
EC2(Smadex, &amp;quot;Smadex Service&amp;quot;, &amp;quot; &amp;quot;)
}

Users(Users, &amp;quot;Users&amp;quot;, &amp;quot; &amp;quot;)
TraditionalServer(AdExchange, &amp;quot;Ad Exchange&amp;quot;, &amp;quot; &amp;quot;)
Mobile(Mobile, &amp;quot;Publisher app or web&amp;quot;, &amp;quot; &amp;quot;)

Users -down-&amp;gt; Mobile: 1. Visits
Mobile -right-&amp;gt; AdExchange: 2. Start auction
AdExchange -right-&amp;gt; Smadex: 3. Bid request / response
Smadex -left-&amp;gt; Mobile: 4. Show Ad
Users -right-&amp;gt; Smadex: 5. Impression / click / install / event {request id}
@enduml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/aaac/aws_demo_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml
!include &amp;lt;awslib/AWSCommon&amp;gt;
!include &amp;lt;awslib/AWSSimplified.puml&amp;gt;
!include &amp;lt;awslib/Compute/all.puml&amp;gt;
!include &amp;lt;awslib/mobile/all.puml&amp;gt;
!include &amp;lt;awslib/general/all.puml&amp;gt;
!include &amp;lt;awslib/GroupIcons/all.puml&amp;gt;
!include &amp;lt;awslib/Storage/all.puml&amp;gt;
!include &amp;lt;awslib/ManagementAndGovernance/all.puml&amp;gt;
!include &amp;lt;awslib/CustomerEngagement/all.puml&amp;gt;
!include &amp;lt;awslib/MachineLearning/all.puml&amp;gt;
!include &amp;lt;awslib/NetworkingAndContentDelivery/all.puml&amp;gt;
!include &amp;lt;awslib/Database/all.puml&amp;gt;
!include &amp;lt;awslib/ApplicationIntegration/all.puml&amp;gt;

&#39;Compute/General
&#39;Storage/SimpleStorageServiceS3.png
&#39;ApplicationIntegration/SQS.png
&#39;Compute/Lambda.png
&#39;Compute/EC2
&#39;ManagementAndGovernance/CloudWatch.png
&#39;CustomerEngagement/SESEmail.png
&#39;MachineLearning/SageMaker.png
&#39;&#39;Mobile/APIGateway.png
&#39;NetworkingAndContentDelivery/APIGateway2.png
&#39;Database/Aurora.png
&#39;ApplicationIntegration/SQSQueue.png


skinparam linetype polyline
&#39; skinparam linetype ortho

&#39;top left section
&#39;-------------------------------------------------------------
package EC2_Instance {
General(IngestionApp, &amp;quot;Ingestion App&amp;quot;, &amp;quot; &amp;quot;)
General(ChunkingApp, &amp;quot;Chunking Orchestration App&amp;quot;, &amp;quot; &amp;quot;)
}

SimpleStorageServiceS3(S3Staging, &amp;quot;Amazon S3 Staging Bucket&amp;quot;, &amp;quot; &amp;quot;)
SQS(SQSIngest, &amp;quot;Amazon SQS Ingest Queue&amp;quot;, &amp;quot; &amp;quot;)

Lambda(LambdaTrigger, &amp;quot;AWS Lambda Trigger Function&amp;quot;, &amp;quot; &amp;quot;)

LambdaTrigger -up-&amp;gt; IngestionApp
IngestionApp -up-&amp;gt; SQSIngest
SQSIngest -down-&amp;gt; ChunkingApp
S3Staging &amp;lt;-down-&amp;gt; EC2_Instance

&#39;top right section
&#39;-------------------------------------------------------------
together {
SQS(SQSLargeFileQueue, &amp;quot;Amazon SQS Large File Queue&amp;quot;, &amp;quot; &amp;quot;)
SQS(SQSSmallFileQueue, &amp;quot;Amazon SQS Small File Queue&amp;quot;, &amp;quot; &amp;quot;)
SQS(SQSSingleFileQueue, &amp;quot;Amazon SQS Single File Queue&amp;quot;, &amp;quot; &amp;quot;)

EC2(LargeFileChunkingAppEC2, &amp;quot;Large File Chunking App on EC2&amp;quot;, &amp;quot; &amp;quot;)
Lambda(LambdaSmallFileChunking, &amp;quot;Small File Chunking Lambda&amp;quot;, &amp;quot; &amp;quot;)
Lambda(ImageConversionLambdaFunction, &amp;quot;Image Conversion Lambda Function&amp;quot;, &amp;quot; &amp;quot;)
}
&#39;todo dashed line boundary
package DLQ {
SQSQueue(DLQ1, &amp;quot;DLQ&amp;quot;, &amp;quot; &amp;quot;)
SQSQueue(DLQ2, &amp;quot;DLQ&amp;quot;, &amp;quot; &amp;quot;)
SQSQueue(DLQ3, &amp;quot;DLQ&amp;quot;, &amp;quot; &amp;quot;)
}

ChunkingApp -right-&amp;gt; SQSLargeFileQueue
ChunkingApp -right-&amp;gt; SQSSmallFileQueue
ChunkingApp -right-&amp;gt; SQSSingleFileQueue

SQSLargeFileQueue -right-&amp;gt; LargeFileChunkingAppEC2
LargeFileChunkingAppEC2 -down-&amp;gt; SQSSmallFileQueue
SQSSmallFileQueue -right-&amp;gt; LambdaSmallFileChunking
LambdaSmallFileChunking -down-&amp;gt; SQSSingleFileQueue
SQSSingleFileQueue -right-&amp;gt; ImageConversionLambdaFunction

&#39;todo dashed line
SQSLargeFileQueue -down-&amp;gt; DLQ1
SQSSmallFileQueue -down-&amp;gt; DLQ2
SQSSingleFileQueue -down-&amp;gt; DLQ3


&#39;bottom right section
&#39;-------------------------------------------------------------

SimpleStorageServiceS3(S3Images, &amp;quot;Amazon S3 Images Bucket&amp;quot;, &amp;quot; &amp;quot;)
EC2(EC2DLQFailsafeApp, &amp;quot;DLQ Failsafe App on EC2&amp;quot;, &amp;quot; &amp;quot;)
SQS(SQSConvertedImageQueue, &amp;quot;Amazon SQS Converted Image Queue&amp;quot;, &amp;quot; &amp;quot;)
Lambda(LambdaInferenceInvocation, &amp;quot;Inference Invocation Lambda Function&amp;quot;, &amp;quot; &amp;quot;)
Aurora(Aurora, &amp;quot;Amazon Aurora&amp;quot;, &amp;quot; &amp;quot;)
APIGateway(AmazonAPIGateway, &amp;quot;Amazon API Gateway&amp;quot;, &amp;quot;&amp;quot;)
SageMaker(AmazonSageMaker, &amp;quot;Amazon SageMaker Endpoint&amp;quot;, &amp;quot;&amp;quot;)

DLQ1 -down-&amp;gt; EC2DLQFailsafeApp
DLQ2 -down-&amp;gt; EC2DLQFailsafeApp
DLQ3 -down-&amp;gt; EC2DLQFailsafeApp

EC2DLQFailsafeApp -right-&amp;gt; S3Images

ImageConversionLambdaFunction -down-&amp;gt; S3Images
S3Images -down-&amp;gt; SQSConvertedImageQueue
SQSConvertedImageQueue -left-&amp;gt; LambdaInferenceInvocation
LambdaInferenceInvocation -down-&amp;gt; Aurora
LambdaInferenceInvocation &amp;lt;-left-&amp;gt; AmazonAPIGateway
AmazonAPIGateway &amp;lt;-left-&amp;gt; AmazonSageMaker


&#39;bottom left section
&#39;-------------------------------------------------------------

CloudWatch(CloudWatch, &amp;quot;Amazon Cloudwatch&amp;quot;, &amp;quot; &amp;quot;)
SNS(SNS1, &amp;quot;Amazon SNS&amp;quot;, &amp;quot;&amp;quot;)
SESEmail(SESEmail, &amp;quot;Email Notification&amp;quot;, &amp;quot;&amp;quot;)

CloudWatch -right-&amp;gt; DLQ
CloudWatch -left-&amp;gt; SNS1
SNS1 -left-&amp;gt; SESEmail

footer %filename() rendered with PlantUML version %version()\nThe Hitchhiker’s Guide to PlantUML
@enduml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;( or see the source: ) - &lt;a href=&#34;img/aaac/aws-demo-2.puml&#34;&gt;source PUML&lt;/a&gt;
&lt;img src=&#34;https://blog.pivotree.cloud/img/aaac/aws_demo2_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;workflow-with-plantuml&#34;&gt;Workflow with PlantUML&lt;/h3&gt;
&lt;p&gt;Using PlantUML for diagrams is pretty straightforward. Assuming that you have installed &lt;a href=&#34;https://plugins.jetbrains.com/plugin/7017-plantuml-integration&#34;&gt;plugin&lt;/a&gt; simply add the file with PUML extension to the project. It will be recognized and PyCharm/IntelliJ will show colored syntax with preview:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/aaac/screenshot-plugin.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;After creating the desired image, use the plugin save button to generate PNG version of the diagram and add it to the project - ideally same folder as the PUML file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/aaac/plugin-save.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Including the sources into documentation is very simple: you can either embedd the full source or provide link to it&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/aaac/include-source.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;pure-python-as-graph-dsl&#34;&gt;Pure Python as graph DSL&lt;/h3&gt;
&lt;p&gt;Recently I have discovered different approach to specifying diagrams in a source code friendly manner. There is an open source project &lt;a href=&#34;https://diagrams.mingrammer.com/&#34;&gt;diagrams&lt;/a&gt; - see also &lt;a href=&#34;https://github.com/mingrammer/diagrams&#34;&gt;github&lt;/a&gt;. Good introduction to this approach is &lt;a href=&#34;https://medium.com/swlh/infrastructure-diagrams-as-code-is-it-possible-b6bbae487f21&#34;&gt;this blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is elegant and beautiful.&lt;/p&gt;
&lt;p&gt;From this:
&lt;img src=&#34;https://diagrams.mingrammer.com/img/message_collecting_code.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;generates this&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://diagrams.mingrammer.com/img/message_collecting_diagram.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
		</item>
		
		<item>
			<title>Building an ATG autoscaling solution</title>
			<link>https://blog.pivotree.cloud/2020-07-01-oc-autoscaling/</link>
			<pubDate>Fri, 10 Jul 2020 13:00:00 &#43;0800</pubDate>
			<author>Pivotree Team</author>
			<guid>https://blog.pivotree.cloud/2020-07-01-oc-autoscaling/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pivotree.cloud/img/unsplash-photos-nehfi_SfqtU.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description>&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Pivotree had a client who wanted to autoscale ATG application servers under certain conditions. The challenge was that previously servers were provisioned and built up based on requirements and were static. Server configurations were baked into the ear and called using jvm args. Any platform integration was all done manually and it could take several days to weeks to complete a build out.&lt;/p&gt;
&lt;p&gt;The client had been previously migrated to AWS cloud but at the time it was a basic lift and shift with the environment deployed using terraform and then built and managed manually. Common patterns/tooling/processes from the datacenter were also migrated over. This was based on the clients requirements at the time.&lt;/p&gt;
&lt;p&gt;The ATG application consists of several layers. The client facing application servers commonly referred to as page or com servers, the content management system called BCC which typically is configured manually to register the various application servers and publish/update content as required and endeca search engine which also requires manually updating various configuration files to add/remove application servers from the configuration.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/oc_autoscaling/oc_infra.jpeg&#34; alt=&#34;Oracle Commerce &#34;&gt;&lt;/p&gt;
&lt;p&gt;Several things had to be considered when developing this solution. How we were going to build the images, how we were going to store the runtime parameters, updating the various configuration files, starting the application and registering the application servers with BCC and Endeca servers.&lt;/p&gt;
&lt;p&gt;Additional consideration around centralized logging, user access and troubleshooting were also a factor. Our SI and OP teams were used to having ssh to all boxes, finding logs on the boxes and resolving issues on the boxes. PCI requirements were also a factor as we needed to be sure we were developing a solution we could certify at a later date.&lt;/p&gt;
&lt;h2 id=&#34;on-building-immutable-infrastructure&#34;&gt;On Building Immutable Infrastructure&lt;/h2&gt;
&lt;p&gt;After a careful analysis of the software stack and previous knowledge working with the platform it was decided we would need to create  immutable images.  Using an immutable image meant we could use the same image across environments as well as potentially re-use this solution in the future with additional clients. We were already working with Hashicorp Packer in other parts of the organization and it was a natural fit for what we planned on building.&lt;/p&gt;
&lt;p&gt;During development of the  solution we also decided that we would leverage AWS System Manager Parameter Store to hold all the runtime values required. We developed a hierarchy that we could use to ensure each environment&amp;rsquo;s values were separated based on the hierarchical path. As part of this a process was developed to update a “property” file that was then parsed and pushed into SSM.&lt;/p&gt;
&lt;p&gt;Due to the size of some of the software we install and the need for autoscaling to occur rapidly another key decision was separating building of images and loading of runtime values. Working with Packer we built 2 machine images. One for the application stack based on Java and Jboss 7.2, the other for Endeca based on Endeca 11.3.2. We also started developing various scripts to populate our configuration and startup files.&lt;/p&gt;
&lt;p&gt;We determined early in the process that we would leverage AWS resource tags to determine what environment we were working on as well as the role of the server. Using those tags allowed us to make decisions and build our queries to SSM. We also decided that we would have 1 download.sh script in our user folder which would be called via cloud-init and would then query tags and download the appropriate automation package from an S3 bucket we had. This gave us the flexibility to update those scripts/templates without requiring a new image.&lt;/p&gt;
&lt;p&gt;Both images required mounting of efs volumes so we developed a script to query SSM for the EFS endpoints, update our template and then append the file to fstab and remount everything. The endeca image was fairly basic with a few installations completed using silent install options and required scripts copied into the home folder.&lt;/p&gt;
&lt;p&gt;Once we had completed the Endeca image the next step was to figure out every value we edit in the jboss configuration files and start replacing those with a token. We also developed a script that would query SSM for that required value and then replace the token with the updated value. This allowed for different configurations such as datasource URL, datasource username or passwords to be unique across env as it would get loaded at runtime.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#####&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;##### Query SSM and assign to variables&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#####&lt;/span&gt;

rds_url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;aws ssm --region &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/.&lt;/span&gt;$&lt;span style=&#34;color:#e6db74&#34;&gt;//&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;get-parameters --names /$env/rds/rds_url --query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parameters[*].{Value:Value}&amp;#34;&lt;/span&gt; | grep Value | cut -d&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; -f4&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

rds2_url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;aws ssm --region &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/.&lt;/span&gt;$&lt;span style=&#34;color:#e6db74&#34;&gt;//&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;get-parameters --names /$env/rds/rds2_url --query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parameters[*].{Value:Value}&amp;#34;&lt;/span&gt; | grep Value | cut -d&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; -f4&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;


rds_db_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;aws ssm --region &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/.&lt;/span&gt;$&lt;span style=&#34;color:#e6db74&#34;&gt;//&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;get-parameters --names rds_db_name --query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parameters[*].{Value:Value}&amp;#34;&lt;/span&gt; | grep Value | cut -d&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; -f4&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

rds_core_username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;aws ssm --region &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/.&lt;/span&gt;$&lt;span style=&#34;color:#e6db74&#34;&gt;//&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;get-parameters --names /$env/core/username --query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parameters[*].{Value:Value}&amp;#34;&lt;/span&gt; | grep Value | cut -d&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; -f4&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

rds_core_password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;aws ssm --region &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/.&lt;/span&gt;$&lt;span style=&#34;color:#e6db74&#34;&gt;//&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;get-parameters --names /$env/core/password --with-decryption --query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parameters[*].{Value:Value}&amp;#34;&lt;/span&gt; | grep Value | cut -d&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; -f4&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;#####&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;##### Replace tokens with assigned variables&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#####&lt;/span&gt;

sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/rds_url/&lt;/span&gt;$rds_url&lt;span style=&#34;color:#e6db74&#34;&gt;/g&amp;#34;&lt;/span&gt; /home/centos/automation/standalone.xml

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z $rds2_url &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
 sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/rds2_url/&lt;/span&gt;$rds2_url&lt;span style=&#34;color:#e6db74&#34;&gt;/g&amp;#34;&lt;/span&gt; /home/centos/automation/standalone.xml
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
 sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/rds2_url/&lt;/span&gt;$rds_url&lt;span style=&#34;color:#e6db74&#34;&gt;/g&amp;#34;&lt;/span&gt; /home/centos/automation/standalone.xml
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;


sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/core_username/&lt;/span&gt;$rds_core_username&lt;span style=&#34;color:#e6db74&#34;&gt;/g&amp;#34;&lt;/span&gt; /home/centos/automation/standalone.xml
sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/core_password/&lt;/span&gt;$rds_core_password&lt;span style=&#34;color:#e6db74&#34;&gt;/g&amp;#34;&lt;/span&gt; /home/centos/automation/standalone.xml
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we took a look at our startup scripts. We pass in several java arguments from JVM name, heap sizes, along with other various runtime values that can be unique depending on the role of the server or requirements. We updated the scripts with tokens and created another script to update those values and then start the application server.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/oc_autoscaling/oc_autoscaling_process.jpeg&#34; alt=&#34;StartUp Process&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once we had a viable image that was updating the required parameters and starting Jboss successfully we then had to start looking at solving the application requirements. This included registering with the ATG BCC and Endeca.&lt;/p&gt;
&lt;p&gt;Oracle ATG had developed and promoted, as part of the Oracle  &lt;a href=&#34;https://github.com/oracle/atg-commerce-iaas&#34;&gt;IAAS toolset&lt;/a&gt;, a &lt;a href=&#34;https://github.com/oracle/atg-commerce-iaas/tree/master/BCCTools&#34;&gt;BCC rest service&lt;/a&gt; that when compiled into the ear would allow for external calls to register/deregister from the topology. We took that and developed a script which is called once Jboss is determined to be online and registers itself. We also developed scripts to add/remove an app server from the endeca configuration files.&lt;/p&gt;
&lt;p&gt;Once everything is up and running we register with the application load balancer for the client facing apps which are called from the web tier.&lt;/p&gt;
&lt;h2 id=&#34;all-things-terraform&#34;&gt;All Things Terraform&lt;/h2&gt;
&lt;p&gt;Pivotree uses Terraform for IaC. Most of our cloud solutions have been built using Terraform. Terraform modules are either maintained internally or are in some cases internally approved community modules. We have several reference architectures depending on the platform and solution required&lt;/p&gt;
&lt;p&gt;Using Terraform to stand up the environment was a matter of taking our reference architecture, updating it to leverage auto-scaling groups and  a few other variables in our main configuration file. This would include anything we want to customise within the environment, EFS, RDS, EC2 instances, ASGs with EC2 info etc. We also developed a module to push any required values to SSM such as EFS endpoints, RDS url and some server instances to load at runtime.&lt;/p&gt;
&lt;p&gt;One of the challenges we realised early on was how to approach the patching/scaling events due to the way AWS manages instances provisioned by autoscaling groups. Terraform has no problems updating the launch configs but doesn’t do anything with that updated config. A solution we found was to use an open source product called &lt;a href=&#34;https://github.com/palantir/bouncer&#34;&gt;Bouncer&lt;/a&gt; which addresses this issue. We can call Bouncer from within Terraform and it will manage the scaling out of the ASG either in serial or canary mode. Our single instances in self healing groups are all serial while our client facing application servers are done canary to ensure it&amp;rsquo;s always available.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The user_data was updated to reference the download.sh file we had built into our packer images. Once we had everything prepared it was a matter of executing our Terraform plan and  approving it in Terraform Cloud.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As part of standing it all up the ASG is configured to scale with parameters that trigger a scale out at the appropriate threshold to give the new instance time to come online before the other servers are overwhelmed. ATG does require a little more time to come online and this has to be accounted for in the scaling thresholds.&lt;/p&gt;
&lt;h2 id=&#34;code-releases&#34;&gt;Code Releases&lt;/h2&gt;
&lt;p&gt;With the infrastructure being immutable you no longer deploy applications to an instance and restart the application but rather deploy your code to an efs volume, update SSM with the path and using the AWS CLI you can execute the required changes on the ASG to launch new instances which will query SSM as part of its launch and symlink the appropriate package on the EFS volume.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/oc_autoscaling/code_release_process.jpeg&#34; alt=&#34;Code Release Process&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;additional-benefits&#34;&gt;Additional Benefits&lt;/h2&gt;
&lt;p&gt;System Integrators and Operators no longer require access to the instances, all logging has been centralised within Cloudwatch. Direct ssh is no longer supported as we have enabled ec2-instance-connect and plan on migrating to AWS SSM Session Manager in the coming months. This helps address PCI requirements as well as simplifying the support experience.&lt;/p&gt;
&lt;p&gt;With this solution in place we developed a patching pipeline within Jenkins. First we built the Packer package and placed the new AMI id into SSM. We have another job that will checkout our updated Terraform source code with the AMI ID of the new image, comments and commits the code back into git. This triggers a build in Terraform which we have decided for the time being is our gate and an operator has to approve the update. Once the operator approves the change, Terraform and Bouncer will complete it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.pivotree.cloud/img/oc_autoscaling/ami_image_process.jpeg&#34; alt=&#34;AMI Image Process&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What’s Next?&lt;/h2&gt;
&lt;p&gt;Developing this solution we have given the client the ability to rapidly provision new environments, scale out production on a demand basis without having additional servers laying around in wait and an improved patching process that reduces the risks and ensures a consistent image.&lt;/p&gt;
&lt;p&gt;Over the next few months we hope to extend this out so we can quickly turn a client onboarding around in a matter of days vs weeks or months.   These are some of the areas we are looking at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Using Oracle RDS S3 integration we are building a solution to have a data pumped DB uploaded to a known space and then imported into the RDS instance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Working with the system integrator and client to further integrate the EAR configuration to improve the model even further.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
		</item>
		
		<item>
			<title>DockerCon 2020</title>
			<link>https://blog.pivotree.cloud/2020-05-30-dockercon-2020/</link>
			<pubDate>Sat, 30 May 2020 11:22:48 &#43;0800</pubDate>
			<author>Pivotree Team</author>
			<guid>https://blog.pivotree.cloud/2020-05-30-dockercon-2020/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pivotree.cloud/img/unsplash-photos-o-ubWHV29Uk.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description>&lt;p&gt;Notes from 2020&amp;rsquo;s Online Event - DockerCon live.&lt;/p&gt;
&lt;p&gt;Links to selected presentations and related content.&lt;/p&gt;
&lt;p&gt;I had an opportunity to attend DockerCon 2018 in person - it was great experience in wonderful city - Barcelona. My notes from it &lt;a href=&#34;https://www.miroadamy.com/posts/2018-12-07-dockercon-2018/&#34;&gt;are here&lt;/a&gt;. I missed previous year (for variety of reasons), but DockerCon this year (as many other tech events) was purely virtual so I was able to see some part of it.&lt;/p&gt;
&lt;p&gt;Compared to 2018, the general tone and content of this DockerCon was quite different. In 2018 it felt like all the attention is focused on big enterprise (mainly Microsoft related) and what Docker as a company is looking for best way how to hook big firms with deep pockets.&lt;/p&gt;
&lt;p&gt;DockerCon 2020 Live felt different - not only because it was online event, without booths, party, workshops and crowds. I had the impression that Docker is focusing once again on developers and I did not miss the enterprisey flavour at all.&lt;/p&gt;
&lt;p&gt;Here are few of the interesting presentations - full agenda is at &lt;a href=&#34;https://docker.events.cube365.net/docker/dockercon/agenda&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-first-10m-pulls-building-the-official-curl-image-for-docker-hub&#34;&gt;The First 10M Pulls: Building the official Curl Image for Docker Hub&lt;/h2&gt;
&lt;p&gt;by James Fuller: &lt;a href=&#34;https://docker.events.cube365.net/docker/dockercon/content/Videos/yKyKXvufcho7ZyE4E&#34;&gt;https://docker.events.cube365.net/docker/dockercon/content/Videos/yKyKXvufcho7ZyE4E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Interesting background information on workflow and lesson learned while maintaining official docker image for one of the most used tools for accessing http endpoints.&lt;/p&gt;
&lt;p&gt;Did you know that curl has around 10 billion deployment ? I did not, neither did I know of curl-configure command. Man lernt nie aus.&lt;/p&gt;
&lt;p&gt;Additional links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/curl/curl-docker&#34;&gt;https://github.com/curl/curl-docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://curl.haxx.se/book.html&#34;&gt;https://curl.haxx.se/book.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ec.haxx.se/&#34;&gt;https://ec.haxx.se/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;multi-container-application-with-nginx-react-node-and-mongo-db&#34;&gt;Multi container application with Nginx, React, Node and Mongo DB&lt;/h2&gt;
&lt;p&gt;by Lukonde Mwila: &lt;a href=&#34;https://docker.events.cube365.net/docker/dockercon/content/Videos/NNkrWWqJSgBBy3nf3&#34;&gt;https://docker.events.cube365.net/docker/dockercon/content/Videos/NNkrWWqJSgBBy3nf3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Walkthrough through dockerizing React app consisting of multiple containers, using docker compose to run it and deploy it AWS using Beanstalk.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&#34;https://github.com/LukeMwila/multi-container-nginx-react-node-mongo&#34;&gt;https://github.com/LukeMwila/multi-container-nginx-react-node-mongo&lt;/a&gt; for the code.&lt;/p&gt;
&lt;h2 id=&#34;best-practices-for-compose-managed-python-applications&#34;&gt;Best Practices for Compose-managed Python Applications&lt;/h2&gt;
&lt;p&gt;by Anca Lordache: &lt;a href=&#34;https://docker.events.cube365.net/docker/dockercon/content/Videos/eWWPtj5dmHAmoYypc&#34;&gt;https://docker.events.cube365.net/docker/dockercon/content/Videos/eWWPtj5dmHAmoYypc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This talk focuses on  best practices for Python projects with Docker Compose, how to bootstrap a project and an example development workflow with debugging and automated testing&lt;/p&gt;
&lt;p&gt;See also &lt;a href=&#34;https://github.com/aiordache/demos&#34;&gt;https://github.com/aiordache/demos&lt;/a&gt; and (unrelated to DockerCon but related to the topic) &lt;a href=&#34;https://www.youtube.com/watch?v=w6TVyxNpJ80&amp;amp;feature=youtu.be&#34;&gt;https://www.youtube.com/watch?v=w6TVyxNpJ80&amp;amp;feature=youtu.be&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, worth looking at is &lt;a href=&#34;https://github.com/docker/awesome-compose&#34;&gt;Awesome Docker Compose samples repo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;become-a-docker-power-user-with-microsoft-visual-studio-code&#34;&gt;Become a Docker Power User With Microsoft Visual Studio Code&lt;/h2&gt;
&lt;p&gt;by Brian Christner - &lt;a href=&#34;https://docker.events.cube365.net/docker/dockercon/content/Videos/4YkHYPnoQshkmnc26&#34;&gt;https://docker.events.cube365.net/docker/dockercon/content/Videos/4YkHYPnoQshkmnc26&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Eye opening demo of Visual Studio plugins for Docker. Also see &lt;a href=&#34;https://github.com/vegasbrianc&#34;&gt;Brian&amp;rsquo;s Github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;building-a-docker-image-packaging-pipeline-using-github-actions&#34;&gt;Building a Docker Image Packaging Pipeline Using GitHub Actions&lt;/h2&gt;
&lt;p&gt;by Gareth Rushgrove - &lt;a href=&#34;https://docker.events.cube365.net/docker/dockercon/content/Videos/SPWM3BdnCZWPN4fN9&#34;&gt;https://docker.events.cube365.net/docker/dockercon/content/Videos/SPWM3BdnCZWPN4fN9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;discusses techniques for building reusable Dockerfiles, difference between packaging from source and packaging from artefacts with advanced use cases, demonstrating the powerful combination of build arguments, multi-stage Dockerfiles and BuildKit&lt;/p&gt;
&lt;p&gt;See also &lt;a href=&#34;https://github.com/garethr&#34;&gt;Gareth&amp;rsquo;s Github&lt;/a&gt;, &lt;a href=&#34;https://medium.com/@tonistiigi/advanced-multi-stage-build-patterns-6f741b852fae&#34;&gt;article on multistage build patterns&lt;/a&gt; and &lt;a href=&#34;https://github.com/snyk/snyk&#34;&gt;Snyk&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;peeking-inside-your-containers-and-infrastructure&#34;&gt;Peeking Inside Your Containers and Infrastructure&lt;/h2&gt;
&lt;p&gt;by Mike Elsmor - &lt;a href=&#34;https://docker.events.cube365.net/docker/dockercon/content/Videos/SNLT7AEW5e32cTpY2&#34;&gt;https://docker.events.cube365.net/docker/dockercon/content/Videos/SNLT7AEW5e32cTpY2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Talk about observability of the infrastructure and the applications using open source tools. Also, worth checking is &lt;a href=&#34;https://github.com/ukmadlz&#34;&gt;author&amp;rsquo;s Github&lt;/a&gt; and &lt;a href=&#34;https://logz.io/pricing/&#34;&gt;product&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;access-logging-made-easy-with-envoy-and-fluent-bit&#34;&gt;Access Logging Made Easy With Envoy and Fluent Bit&lt;/h2&gt;
&lt;p&gt;by Carmen Puccio (despite the nice spainitalian flare of the name, he is a guy) - &lt;a href=&#34;https://docker.events.cube365.net/docker/dockercon/content/Videos/t2ykDpEams3GDwbYy&#34;&gt;https://docker.events.cube365.net/docker/dockercon/content/Videos/t2ykDpEams3GDwbYy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Session about how to implement a consistent and structured log format for microservices applications with Envoy and Fluent Bit.&lt;/p&gt;</description>
		</item>
		
		<item>
			<title>Talks - template </title>
			<link>https://blog.pivotree.cloud/talks/</link>
			<pubDate>Fri, 01 May 2020 09:50:00 -0700</pubDate>
			<author>Pivotree Team</author>
			<guid>https://blog.pivotree.cloud/talks/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pivotree.cloud/img/default-header-img.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description>&lt;p&gt;Coming soon &amp;hellip;&lt;/p&gt;
</description>
		</item>
		
		<item>
			<title>Version Info</title>
			<link>https://blog.pivotree.cloud/version/</link>
			<pubDate>Fri, 01 May 2020 00:00:00 UTC</pubDate>
			<author>Pivotree Team</author>
			<guid>https://blog.pivotree.cloud/version/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pivotree.cloud/img/default-header-img.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description></description>
		</item>
		
		<item>
			<title>Archives</title>
			<link>https://blog.pivotree.cloud/archives/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
			<author>Pivotree Team</author>
			<guid>https://blog.pivotree.cloud/archives/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pivotree.cloud/img/default-header-img.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description></description>
		</item>
		
		<item>
			<title>Authors</title>
			<link>https://blog.pivotree.cloud/authors/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
			<author>Pivotree Team</author>
			<guid>https://blog.pivotree.cloud/authors/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pivotree.cloud/img/default-header-img.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description></description>
		</item>
		
		<item>
			<title>Search</title>
			<link>https://blog.pivotree.cloud/search/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
			<author>Pivotree Team</author>
			<guid>https://blog.pivotree.cloud/search/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pivotree.cloud/img/default-header-img.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description></description>
		</item>
		
	</channel>
</rss>
